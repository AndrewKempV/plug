// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  fixedEncodeURIComponent
} from "./base";
import { PackageType } from "app/features/event/types";

/**
 *
 * @export
 * @interface Account
 */
export interface Account {
  /**
   *
   * @type {BusinessProfile}
   * @memberof Account
   */
  businessProfile?: BusinessProfile;
  /**
   *
   * @type {string}
   * @memberof Account
   */
  businessType?: string;
  /**
   *
   * @type {Capabilities}
   * @memberof Account
   */
  capabilities?: Capabilities;
  /**
   *
   * @type {boolean}
   * @memberof Account
   */
  chargesEnabled?: boolean;
  /**
   *
   * @type {Company}
   * @memberof Account
   */
  company?: Company;
  /**
   *
   * @type {string}
   * @memberof Account
   */
  country?: string;
  /**
   *
   * @type {number}
   * @memberof Account
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof Account
   */
  defaultCurrency?: string;
  /**
   *
   * @type {boolean}
   * @memberof Account
   */
  deleted?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Account
   */
  detailsSubmitted?: boolean;
  /**
   *
   * @type {string}
   * @memberof Account
   */
  email?: string;
  /**
   *
   * @type {ExternalAccountCollection}
   * @memberof Account
   */
  externalAccounts?: ExternalAccountCollection;
  /**
   *
   * @type {string}
   * @memberof Account
   */
  id?: string;
  /**
   *
   * @type {Person}
   * @memberof Account
   */
  individual?: Person;
  /**
   *
   * @type {object}
   * @memberof Account
   */
  lastResponse?: object;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Account
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Account
   */
  object?: string;
  /**
   *
   * @type {boolean}
   * @memberof Account
   */
  payoutsEnabled?: boolean;
  /**
   *
   * @type {Requirements}
   * @memberof Account
   */
  requirements?: Requirements;
  /**
   *
   * @type {Settings}
   * @memberof Account
   */
  settings?: Settings;
  /**
   *
   * @type {TosAcceptance}
   * @memberof Account
   */
  tosAcceptance?: TosAcceptance;
  /**
   *
   * @type {string}
   * @memberof Account
   */
  type?: string;
}
/**
 *
 * @export
 * @interface AchCreditTransfer
 */
export interface AchCreditTransfer {
  /**
   *
   * @type {string}
   * @memberof AchCreditTransfer
   */
  accountNumber?: string;
  /**
   *
   * @type {string}
   * @memberof AchCreditTransfer
   */
  bankName?: string;
  /**
   *
   * @type {object}
   * @memberof AchCreditTransfer
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof AchCreditTransfer
   */
  routingNumber?: string;
  /**
   *
   * @type {string}
   * @memberof AchCreditTransfer
   */
  swiftCode?: string;
}
/**
 *
 * @export
 * @interface AchDebit
 */
export interface AchDebit {
  /**
   *
   * @type {string}
   * @memberof AchDebit
   */
  accountHolderType?: string;
  /**
   *
   * @type {string}
   * @memberof AchDebit
   */
  bankName?: string;
  /**
   *
   * @type {string}
   * @memberof AchDebit
   */
  country?: string;
  /**
   *
   * @type {string}
   * @memberof AchDebit
   */
  fingerprint?: string;
  /**
   *
   * @type {string}
   * @memberof AchDebit
   */
  last4?: string;
  /**
   *
   * @type {object}
   * @memberof AchDebit
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof AchDebit
   */
  routingNumber?: string;
}
/**
 *
 * @export
 * @interface AcssDebit
 */
export interface AcssDebit {
  /**
   *
   * @type {string}
   * @memberof AcssDebit
   */
  country?: string;
  /**
   *
   * @type {string}
   * @memberof AcssDebit
   */
  fingerprint?: string;
  /**
   *
   * @type {string}
   * @memberof AcssDebit
   */
  last4?: string;
  /**
   *
   * @type {object}
   * @memberof AcssDebit
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof AcssDebit
   */
  routingNumber?: string;
}
/**
 *
 * @export
 * @interface Address
 */
export interface Address {
  /**
   *
   * @type {string}
   * @memberof Address
   */
  city?: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  country?: string;
  /**
   *
   * @type {object}
   * @memberof Address
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  line1?: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  line2?: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  postalCode?: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  state?: string;
}
/**
 *
 * @export
 * @interface Alipay
 */
export interface Alipay {
  /**
   *
   * @type {object}
   * @memberof Alipay
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface AlternateStatementDescriptors
 */
export interface AlternateStatementDescriptors {
  /**
   *
   * @type {string}
   * @memberof AlternateStatementDescriptors
   */
  kana?: string;
  /**
   *
   * @type {string}
   * @memberof AlternateStatementDescriptors
   */
  kanji?: string;
  /**
   *
   * @type {object}
   * @memberof AlternateStatementDescriptors
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface AmexExpressCheckout
 */
export interface AmexExpressCheckout {
  /**
   *
   * @type {object}
   * @memberof AmexExpressCheckout
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface ApplePay
 */
export interface ApplePay {
  /**
   *
   * @type {object}
   * @memberof ApplePay
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface Application
 */
export interface Application {
  /**
   *
   * @type {string}
   * @memberof Application
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof Application
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Application
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Application
   */
  object?: string;
}
/**
 *
 * @export
 * @interface ApplicationFee
 */
export interface ApplicationFee {
  /**
   *
   * @type {string}
   * @memberof ApplicationFee
   */
  account?: string;
  /**
   *
   * @type {Account}
   * @memberof ApplicationFee
   */
  accountObject?: Account;
  /**
   *
   * @type {number}
   * @memberof ApplicationFee
   */
  amount?: number;
  /**
   *
   * @type {number}
   * @memberof ApplicationFee
   */
  amountRefunded?: number;
  /**
   *
   * @type {string}
   * @memberof ApplicationFee
   */
  application?: string;
  /**
   *
   * @type {Application}
   * @memberof ApplicationFee
   */
  applicationObject?: Application;
  /**
   *
   * @type {string}
   * @memberof ApplicationFee
   */
  balanceTransaction?: string;
  /**
   *
   * @type {BalanceTransaction}
   * @memberof ApplicationFee
   */
  balanceTransactionObject?: BalanceTransaction;
  /**
   *
   * @type {string}
   * @memberof ApplicationFee
   */
  charge?: string;
  /**
   *
   * @type {Charge}
   * @memberof ApplicationFee
   */
  chargeObject?: Charge;
  /**
   *
   * @type {number}
   * @memberof ApplicationFee
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof ApplicationFee
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof ApplicationFee
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof ApplicationFee
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof ApplicationFee
   */
  livemode?: boolean;
  /**
   *
   * @type {string}
   * @memberof ApplicationFee
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof ApplicationFee
   */
  originatingTransaction?: string;
  /**
   *
   * @type {Charge}
   * @memberof ApplicationFee
   */
  originatingTransactionObject?: Charge;
  /**
   *
   * @type {boolean}
   * @memberof ApplicationFee
   */
  refunded?: boolean;
  /**
   *
   * @type {FeeRefundCollection}
   * @memberof ApplicationFee
   */
  refunds?: FeeRefundCollection;
}
/**
 *
 * @export
 * @interface BalanceTransaction
 */
export interface BalanceTransaction {
  /**
   *
   * @type {number}
   * @memberof BalanceTransaction
   */
  amount?: number;
  /**
   *
   * @type {number}
   * @memberof BalanceTransaction
   */
  availableOn?: number;
  /**
   *
   * @type {number}
   * @memberof BalanceTransaction
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof BalanceTransaction
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof BalanceTransaction
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof BalanceTransaction
   */
  exchangeRate?: number;
  /**
   *
   * @type {number}
   * @memberof BalanceTransaction
   */
  fee?: number;
  /**
   *
   * @type {Array<Fee>}
   * @memberof BalanceTransaction
   */
  feeDetails?: Fee[];
  /**
   *
   * @type {string}
   * @memberof BalanceTransaction
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof BalanceTransaction
   */
  lastResponse?: object;
  /**
   *
   * @type {number}
   * @memberof BalanceTransaction
   */
  net?: number;
  /**
   *
   * @type {string}
   * @memberof BalanceTransaction
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof BalanceTransaction
   */
  source?: string;
  /**
   *
   * @type {BalanceTransactionSource}
   * @memberof BalanceTransaction
   */
  sourceObject?: BalanceTransactionSource;
  /**
   *
   * @type {string}
   * @memberof BalanceTransaction
   */
  status?: string;
  /**
   *
   * @type {string}
   * @memberof BalanceTransaction
   */
  type?: string;
}
/**
 *
 * @export
 * @interface BalanceTransactionSource
 */
export interface BalanceTransactionSource {
  /**
   *
   * @type {string}
   * @memberof BalanceTransactionSource
   */
  id?: string;
}
/**
 *
 * @export
 * @interface Bancontact
 */
export interface Bancontact {
  /**
   *
   * @type {string}
   * @memberof Bancontact
   */
  bankCode?: string;
  /**
   *
   * @type {string}
   * @memberof Bancontact
   */
  bankName?: string;
  /**
   *
   * @type {string}
   * @memberof Bancontact
   */
  bic?: string;
  /**
   *
   * @type {string}
   * @memberof Bancontact
   */
  ibanLast4?: string;
  /**
   *
   * @type {object}
   * @memberof Bancontact
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Bancontact
   */
  preferredLanguage?: string;
  /**
   *
   * @type {string}
   * @memberof Bancontact
   */
  verifiedName?: string;
}
/**
 *
 * @export
 * @interface BankAccount
 */
export interface BankAccount {
  /**
   *
   * @type {string}
   * @memberof BankAccount
   */
  account?: string;
  /**
   *
   * @type {string}
   * @memberof BankAccount
   */
  accountHolderName?: string;
  /**
   *
   * @type {string}
   * @memberof BankAccount
   */
  accountHolderType?: string;
  /**
   *
   * @type {Account}
   * @memberof BankAccount
   */
  accountObject?: Account;
  /**
   *
   * @type {string}
   * @memberof BankAccount
   */
  bankName?: string;
  /**
   *
   * @type {string}
   * @memberof BankAccount
   */
  country?: string;
  /**
   *
   * @type {string}
   * @memberof BankAccount
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof BankAccount
   */
  customer?: string;
  /**
   *
   * @type {Customer}
   * @memberof BankAccount
   */
  customerObject?: Customer;
  /**
   *
   * @type {boolean}
   * @memberof BankAccount
   */
  defaultForCurrency?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof BankAccount
   */
  deleted?: boolean;
  /**
   *
   * @type {string}
   * @memberof BankAccount
   */
  fingerprint?: string;
  /**
   *
   * @type {string}
   * @memberof BankAccount
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof BankAccount
   */
  last4?: string;
  /**
   *
   * @type {object}
   * @memberof BankAccount
   */
  lastResponse?: object;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof BankAccount
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof BankAccount
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof BankAccount
   */
  routingNumber?: string;
  /**
   *
   * @type {string}
   * @memberof BankAccount
   */
  status?: string;
}
/**
 *
 * @export
 * @interface BaseResponseModelCard
 */
export interface BaseResponseModelCard {
  /**
   *
   * @type {Array<Card>}
   * @memberof BaseResponseModelCard
   */
  data?: Card[];
  /**
   *
   * @type {ErrorModel}
   * @memberof BaseResponseModelCard
   */
  error?: ErrorModel;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelCard
   */
  status?: BaseResponseModelCardStatusEnum;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelCard
   */
  timestamp?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum BaseResponseModelCardStatusEnum {
  _100CONTINUE = "100 CONTINUE",
  _101SWITCHINGPROTOCOLS = "101 SWITCHING_PROTOCOLS",
  _102PROCESSING = "102 PROCESSING",
  _103CHECKPOINT = "103 CHECKPOINT",
  _200OK = "200 OK",
  _201CREATED = "201 CREATED",
  _202ACCEPTED = "202 ACCEPTED",
  _203NONAUTHORITATIVEINFORMATION = "203 NON_AUTHORITATIVE_INFORMATION",
  _204NOCONTENT = "204 NO_CONTENT",
  _205RESETCONTENT = "205 RESET_CONTENT",
  _206PARTIALCONTENT = "206 PARTIAL_CONTENT",
  _207MULTISTATUS = "207 MULTI_STATUS",
  _208ALREADYREPORTED = "208 ALREADY_REPORTED",
  _226IMUSED = "226 IM_USED",
  _300MULTIPLECHOICES = "300 MULTIPLE_CHOICES",
  _301MOVEDPERMANENTLY = "301 MOVED_PERMANENTLY",
  _302FOUND = "302 FOUND",
  _302MOVEDTEMPORARILY = "302 MOVED_TEMPORARILY",
  _303SEEOTHER = "303 SEE_OTHER",
  _304NOTMODIFIED = "304 NOT_MODIFIED",
  _305USEPROXY = "305 USE_PROXY",
  _307TEMPORARYREDIRECT = "307 TEMPORARY_REDIRECT",
  _308PERMANENTREDIRECT = "308 PERMANENT_REDIRECT",
  _400BADREQUEST = "400 BAD_REQUEST",
  _401UNAUTHORIZED = "401 UNAUTHORIZED",
  _402PAYMENTREQUIRED = "402 PAYMENT_REQUIRED",
  _403FORBIDDEN = "403 FORBIDDEN",
  _404NOTFOUND = "404 NOT_FOUND",
  _405METHODNOTALLOWED = "405 METHOD_NOT_ALLOWED",
  _406NOTACCEPTABLE = "406 NOT_ACCEPTABLE",
  _407PROXYAUTHENTICATIONREQUIRED = "407 PROXY_AUTHENTICATION_REQUIRED",
  _408REQUESTTIMEOUT = "408 REQUEST_TIMEOUT",
  _409CONFLICT = "409 CONFLICT",
  _410GONE = "410 GONE",
  _411LENGTHREQUIRED = "411 LENGTH_REQUIRED",
  _412PRECONDITIONFAILED = "412 PRECONDITION_FAILED",
  _413PAYLOADTOOLARGE = "413 PAYLOAD_TOO_LARGE",
  _413REQUESTENTITYTOOLARGE = "413 REQUEST_ENTITY_TOO_LARGE",
  _414URITOOLONG = "414 URI_TOO_LONG",
  _414REQUESTURITOOLONG = "414 REQUEST_URI_TOO_LONG",
  _415UNSUPPORTEDMEDIATYPE = "415 UNSUPPORTED_MEDIA_TYPE",
  _416REQUESTEDRANGENOTSATISFIABLE = "416 REQUESTED_RANGE_NOT_SATISFIABLE",
  _417EXPECTATIONFAILED = "417 EXPECTATION_FAILED",
  _418IAMATEAPOT = "418 I_AM_A_TEAPOT",
  _419INSUFFICIENTSPACEONRESOURCE = "419 INSUFFICIENT_SPACE_ON_RESOURCE",
  _420METHODFAILURE = "420 METHOD_FAILURE",
  _421DESTINATIONLOCKED = "421 DESTINATION_LOCKED",
  _422UNPROCESSABLEENTITY = "422 UNPROCESSABLE_ENTITY",
  _423LOCKED = "423 LOCKED",
  _424FAILEDDEPENDENCY = "424 FAILED_DEPENDENCY",
  _426UPGRADEREQUIRED = "426 UPGRADE_REQUIRED",
  _428PRECONDITIONREQUIRED = "428 PRECONDITION_REQUIRED",
  _429TOOMANYREQUESTS = "429 TOO_MANY_REQUESTS",
  _431REQUESTHEADERFIELDSTOOLARGE = "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
  _451UNAVAILABLEFORLEGALREASONS = "451 UNAVAILABLE_FOR_LEGAL_REASONS",
  _500INTERNALSERVERERROR = "500 INTERNAL_SERVER_ERROR",
  _501NOTIMPLEMENTED = "501 NOT_IMPLEMENTED",
  _502BADGATEWAY = "502 BAD_GATEWAY",
  _503SERVICEUNAVAILABLE = "503 SERVICE_UNAVAILABLE",
  _504GATEWAYTIMEOUT = "504 GATEWAY_TIMEOUT",
  _505HTTPVERSIONNOTSUPPORTED = "505 HTTP_VERSION_NOT_SUPPORTED",
  _506VARIANTALSONEGOTIATES = "506 VARIANT_ALSO_NEGOTIATES",
  _507INSUFFICIENTSTORAGE = "507 INSUFFICIENT_STORAGE",
  _508LOOPDETECTED = "508 LOOP_DETECTED",
  _509BANDWIDTHLIMITEXCEEDED = "509 BANDWIDTH_LIMIT_EXCEEDED",
  _510NOTEXTENDED = "510 NOT_EXTENDED",
  _511NETWORKAUTHENTICATIONREQUIRED = "511 NETWORK_AUTHENTICATION_REQUIRED"
}

/**
 *
 * @export
 * @interface BaseResponseModelCharge
 */
export interface BaseResponseModelCharge {
  /**
   *
   * @type {Array<Charge>}
   * @memberof BaseResponseModelCharge
   */
  data?: Charge[];
  /**
   *
   * @type {ErrorModel}
   * @memberof BaseResponseModelCharge
   */
  error?: ErrorModel;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelCharge
   */
  status?: BaseResponseModelChargeStatusEnum;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelCharge
   */
  timestamp?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum BaseResponseModelChargeStatusEnum {
  _100CONTINUE = "100 CONTINUE",
  _101SWITCHINGPROTOCOLS = "101 SWITCHING_PROTOCOLS",
  _102PROCESSING = "102 PROCESSING",
  _103CHECKPOINT = "103 CHECKPOINT",
  _200OK = "200 OK",
  _201CREATED = "201 CREATED",
  _202ACCEPTED = "202 ACCEPTED",
  _203NONAUTHORITATIVEINFORMATION = "203 NON_AUTHORITATIVE_INFORMATION",
  _204NOCONTENT = "204 NO_CONTENT",
  _205RESETCONTENT = "205 RESET_CONTENT",
  _206PARTIALCONTENT = "206 PARTIAL_CONTENT",
  _207MULTISTATUS = "207 MULTI_STATUS",
  _208ALREADYREPORTED = "208 ALREADY_REPORTED",
  _226IMUSED = "226 IM_USED",
  _300MULTIPLECHOICES = "300 MULTIPLE_CHOICES",
  _301MOVEDPERMANENTLY = "301 MOVED_PERMANENTLY",
  _302FOUND = "302 FOUND",
  _302MOVEDTEMPORARILY = "302 MOVED_TEMPORARILY",
  _303SEEOTHER = "303 SEE_OTHER",
  _304NOTMODIFIED = "304 NOT_MODIFIED",
  _305USEPROXY = "305 USE_PROXY",
  _307TEMPORARYREDIRECT = "307 TEMPORARY_REDIRECT",
  _308PERMANENTREDIRECT = "308 PERMANENT_REDIRECT",
  _400BADREQUEST = "400 BAD_REQUEST",
  _401UNAUTHORIZED = "401 UNAUTHORIZED",
  _402PAYMENTREQUIRED = "402 PAYMENT_REQUIRED",
  _403FORBIDDEN = "403 FORBIDDEN",
  _404NOTFOUND = "404 NOT_FOUND",
  _405METHODNOTALLOWED = "405 METHOD_NOT_ALLOWED",
  _406NOTACCEPTABLE = "406 NOT_ACCEPTABLE",
  _407PROXYAUTHENTICATIONREQUIRED = "407 PROXY_AUTHENTICATION_REQUIRED",
  _408REQUESTTIMEOUT = "408 REQUEST_TIMEOUT",
  _409CONFLICT = "409 CONFLICT",
  _410GONE = "410 GONE",
  _411LENGTHREQUIRED = "411 LENGTH_REQUIRED",
  _412PRECONDITIONFAILED = "412 PRECONDITION_FAILED",
  _413PAYLOADTOOLARGE = "413 PAYLOAD_TOO_LARGE",
  _413REQUESTENTITYTOOLARGE = "413 REQUEST_ENTITY_TOO_LARGE",
  _414URITOOLONG = "414 URI_TOO_LONG",
  _414REQUESTURITOOLONG = "414 REQUEST_URI_TOO_LONG",
  _415UNSUPPORTEDMEDIATYPE = "415 UNSUPPORTED_MEDIA_TYPE",
  _416REQUESTEDRANGENOTSATISFIABLE = "416 REQUESTED_RANGE_NOT_SATISFIABLE",
  _417EXPECTATIONFAILED = "417 EXPECTATION_FAILED",
  _418IAMATEAPOT = "418 I_AM_A_TEAPOT",
  _419INSUFFICIENTSPACEONRESOURCE = "419 INSUFFICIENT_SPACE_ON_RESOURCE",
  _420METHODFAILURE = "420 METHOD_FAILURE",
  _421DESTINATIONLOCKED = "421 DESTINATION_LOCKED",
  _422UNPROCESSABLEENTITY = "422 UNPROCESSABLE_ENTITY",
  _423LOCKED = "423 LOCKED",
  _424FAILEDDEPENDENCY = "424 FAILED_DEPENDENCY",
  _426UPGRADEREQUIRED = "426 UPGRADE_REQUIRED",
  _428PRECONDITIONREQUIRED = "428 PRECONDITION_REQUIRED",
  _429TOOMANYREQUESTS = "429 TOO_MANY_REQUESTS",
  _431REQUESTHEADERFIELDSTOOLARGE = "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
  _451UNAVAILABLEFORLEGALREASONS = "451 UNAVAILABLE_FOR_LEGAL_REASONS",
  _500INTERNALSERVERERROR = "500 INTERNAL_SERVER_ERROR",
  _501NOTIMPLEMENTED = "501 NOT_IMPLEMENTED",
  _502BADGATEWAY = "502 BAD_GATEWAY",
  _503SERVICEUNAVAILABLE = "503 SERVICE_UNAVAILABLE",
  _504GATEWAYTIMEOUT = "504 GATEWAY_TIMEOUT",
  _505HTTPVERSIONNOTSUPPORTED = "505 HTTP_VERSION_NOT_SUPPORTED",
  _506VARIANTALSONEGOTIATES = "506 VARIANT_ALSO_NEGOTIATES",
  _507INSUFFICIENTSTORAGE = "507 INSUFFICIENT_STORAGE",
  _508LOOPDETECTED = "508 LOOP_DETECTED",
  _509BANDWIDTHLIMITEXCEEDED = "509 BANDWIDTH_LIMIT_EXCEEDED",
  _510NOTEXTENDED = "510 NOT_EXTENDED",
  _511NETWORKAUTHENTICATIONREQUIRED = "511 NETWORK_AUTHENTICATION_REQUIRED"
}

/**
 *
 * @export
 * @interface BaseResponseModelCustomer
 */
export interface BaseResponseModelCustomer {
  /**
   *
   * @type {Array<Customer>}
   * @memberof BaseResponseModelCustomer
   */
  data?: Customer[];
  /**
   *
   * @type {ErrorModel}
   * @memberof BaseResponseModelCustomer
   */
  error?: ErrorModel;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelCustomer
   */
  status?: BaseResponseModelCustomerStatusEnum;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelCustomer
   */
  timestamp?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum BaseResponseModelCustomerStatusEnum {
  _100CONTINUE = "100 CONTINUE",
  _101SWITCHINGPROTOCOLS = "101 SWITCHING_PROTOCOLS",
  _102PROCESSING = "102 PROCESSING",
  _103CHECKPOINT = "103 CHECKPOINT",
  _200OK = "200 OK",
  _201CREATED = "201 CREATED",
  _202ACCEPTED = "202 ACCEPTED",
  _203NONAUTHORITATIVEINFORMATION = "203 NON_AUTHORITATIVE_INFORMATION",
  _204NOCONTENT = "204 NO_CONTENT",
  _205RESETCONTENT = "205 RESET_CONTENT",
  _206PARTIALCONTENT = "206 PARTIAL_CONTENT",
  _207MULTISTATUS = "207 MULTI_STATUS",
  _208ALREADYREPORTED = "208 ALREADY_REPORTED",
  _226IMUSED = "226 IM_USED",
  _300MULTIPLECHOICES = "300 MULTIPLE_CHOICES",
  _301MOVEDPERMANENTLY = "301 MOVED_PERMANENTLY",
  _302FOUND = "302 FOUND",
  _302MOVEDTEMPORARILY = "302 MOVED_TEMPORARILY",
  _303SEEOTHER = "303 SEE_OTHER",
  _304NOTMODIFIED = "304 NOT_MODIFIED",
  _305USEPROXY = "305 USE_PROXY",
  _307TEMPORARYREDIRECT = "307 TEMPORARY_REDIRECT",
  _308PERMANENTREDIRECT = "308 PERMANENT_REDIRECT",
  _400BADREQUEST = "400 BAD_REQUEST",
  _401UNAUTHORIZED = "401 UNAUTHORIZED",
  _402PAYMENTREQUIRED = "402 PAYMENT_REQUIRED",
  _403FORBIDDEN = "403 FORBIDDEN",
  _404NOTFOUND = "404 NOT_FOUND",
  _405METHODNOTALLOWED = "405 METHOD_NOT_ALLOWED",
  _406NOTACCEPTABLE = "406 NOT_ACCEPTABLE",
  _407PROXYAUTHENTICATIONREQUIRED = "407 PROXY_AUTHENTICATION_REQUIRED",
  _408REQUESTTIMEOUT = "408 REQUEST_TIMEOUT",
  _409CONFLICT = "409 CONFLICT",
  _410GONE = "410 GONE",
  _411LENGTHREQUIRED = "411 LENGTH_REQUIRED",
  _412PRECONDITIONFAILED = "412 PRECONDITION_FAILED",
  _413PAYLOADTOOLARGE = "413 PAYLOAD_TOO_LARGE",
  _413REQUESTENTITYTOOLARGE = "413 REQUEST_ENTITY_TOO_LARGE",
  _414URITOOLONG = "414 URI_TOO_LONG",
  _414REQUESTURITOOLONG = "414 REQUEST_URI_TOO_LONG",
  _415UNSUPPORTEDMEDIATYPE = "415 UNSUPPORTED_MEDIA_TYPE",
  _416REQUESTEDRANGENOTSATISFIABLE = "416 REQUESTED_RANGE_NOT_SATISFIABLE",
  _417EXPECTATIONFAILED = "417 EXPECTATION_FAILED",
  _418IAMATEAPOT = "418 I_AM_A_TEAPOT",
  _419INSUFFICIENTSPACEONRESOURCE = "419 INSUFFICIENT_SPACE_ON_RESOURCE",
  _420METHODFAILURE = "420 METHOD_FAILURE",
  _421DESTINATIONLOCKED = "421 DESTINATION_LOCKED",
  _422UNPROCESSABLEENTITY = "422 UNPROCESSABLE_ENTITY",
  _423LOCKED = "423 LOCKED",
  _424FAILEDDEPENDENCY = "424 FAILED_DEPENDENCY",
  _426UPGRADEREQUIRED = "426 UPGRADE_REQUIRED",
  _428PRECONDITIONREQUIRED = "428 PRECONDITION_REQUIRED",
  _429TOOMANYREQUESTS = "429 TOO_MANY_REQUESTS",
  _431REQUESTHEADERFIELDSTOOLARGE = "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
  _451UNAVAILABLEFORLEGALREASONS = "451 UNAVAILABLE_FOR_LEGAL_REASONS",
  _500INTERNALSERVERERROR = "500 INTERNAL_SERVER_ERROR",
  _501NOTIMPLEMENTED = "501 NOT_IMPLEMENTED",
  _502BADGATEWAY = "502 BAD_GATEWAY",
  _503SERVICEUNAVAILABLE = "503 SERVICE_UNAVAILABLE",
  _504GATEWAYTIMEOUT = "504 GATEWAY_TIMEOUT",
  _505HTTPVERSIONNOTSUPPORTED = "505 HTTP_VERSION_NOT_SUPPORTED",
  _506VARIANTALSONEGOTIATES = "506 VARIANT_ALSO_NEGOTIATES",
  _507INSUFFICIENTSTORAGE = "507 INSUFFICIENT_STORAGE",
  _508LOOPDETECTED = "508 LOOP_DETECTED",
  _509BANDWIDTHLIMITEXCEEDED = "509 BANDWIDTH_LIMIT_EXCEEDED",
  _510NOTEXTENDED = "510 NOT_EXTENDED",
  _511NETWORKAUTHENTICATIONREQUIRED = "511 NETWORK_AUTHENTICATION_REQUIRED"
}

/**
 *
 * @export
 * @interface BaseResponseModelEventDetailModel
 */
export interface BaseResponseModelEventDetailModel {
  /**
   *
   * @type {Array<EventDetailModel>}
   * @memberof BaseResponseModelEventDetailModel
   */
  data?: EventDetailModel[];
  /**
   *
   * @type {ErrorModel}
   * @memberof BaseResponseModelEventDetailModel
   */
  error?: ErrorModel;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelEventDetailModel
   */
  status?: BaseResponseModelEventDetailModelStatusEnum;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelEventDetailModel
   */
  timestamp?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum BaseResponseModelEventDetailModelStatusEnum {
  _100CONTINUE = "100 CONTINUE",
  _101SWITCHINGPROTOCOLS = "101 SWITCHING_PROTOCOLS",
  _102PROCESSING = "102 PROCESSING",
  _103CHECKPOINT = "103 CHECKPOINT",
  _200OK = "200 OK",
  _201CREATED = "201 CREATED",
  _202ACCEPTED = "202 ACCEPTED",
  _203NONAUTHORITATIVEINFORMATION = "203 NON_AUTHORITATIVE_INFORMATION",
  _204NOCONTENT = "204 NO_CONTENT",
  _205RESETCONTENT = "205 RESET_CONTENT",
  _206PARTIALCONTENT = "206 PARTIAL_CONTENT",
  _207MULTISTATUS = "207 MULTI_STATUS",
  _208ALREADYREPORTED = "208 ALREADY_REPORTED",
  _226IMUSED = "226 IM_USED",
  _300MULTIPLECHOICES = "300 MULTIPLE_CHOICES",
  _301MOVEDPERMANENTLY = "301 MOVED_PERMANENTLY",
  _302FOUND = "302 FOUND",
  _302MOVEDTEMPORARILY = "302 MOVED_TEMPORARILY",
  _303SEEOTHER = "303 SEE_OTHER",
  _304NOTMODIFIED = "304 NOT_MODIFIED",
  _305USEPROXY = "305 USE_PROXY",
  _307TEMPORARYREDIRECT = "307 TEMPORARY_REDIRECT",
  _308PERMANENTREDIRECT = "308 PERMANENT_REDIRECT",
  _400BADREQUEST = "400 BAD_REQUEST",
  _401UNAUTHORIZED = "401 UNAUTHORIZED",
  _402PAYMENTREQUIRED = "402 PAYMENT_REQUIRED",
  _403FORBIDDEN = "403 FORBIDDEN",
  _404NOTFOUND = "404 NOT_FOUND",
  _405METHODNOTALLOWED = "405 METHOD_NOT_ALLOWED",
  _406NOTACCEPTABLE = "406 NOT_ACCEPTABLE",
  _407PROXYAUTHENTICATIONREQUIRED = "407 PROXY_AUTHENTICATION_REQUIRED",
  _408REQUESTTIMEOUT = "408 REQUEST_TIMEOUT",
  _409CONFLICT = "409 CONFLICT",
  _410GONE = "410 GONE",
  _411LENGTHREQUIRED = "411 LENGTH_REQUIRED",
  _412PRECONDITIONFAILED = "412 PRECONDITION_FAILED",
  _413PAYLOADTOOLARGE = "413 PAYLOAD_TOO_LARGE",
  _413REQUESTENTITYTOOLARGE = "413 REQUEST_ENTITY_TOO_LARGE",
  _414URITOOLONG = "414 URI_TOO_LONG",
  _414REQUESTURITOOLONG = "414 REQUEST_URI_TOO_LONG",
  _415UNSUPPORTEDMEDIATYPE = "415 UNSUPPORTED_MEDIA_TYPE",
  _416REQUESTEDRANGENOTSATISFIABLE = "416 REQUESTED_RANGE_NOT_SATISFIABLE",
  _417EXPECTATIONFAILED = "417 EXPECTATION_FAILED",
  _418IAMATEAPOT = "418 I_AM_A_TEAPOT",
  _419INSUFFICIENTSPACEONRESOURCE = "419 INSUFFICIENT_SPACE_ON_RESOURCE",
  _420METHODFAILURE = "420 METHOD_FAILURE",
  _421DESTINATIONLOCKED = "421 DESTINATION_LOCKED",
  _422UNPROCESSABLEENTITY = "422 UNPROCESSABLE_ENTITY",
  _423LOCKED = "423 LOCKED",
  _424FAILEDDEPENDENCY = "424 FAILED_DEPENDENCY",
  _426UPGRADEREQUIRED = "426 UPGRADE_REQUIRED",
  _428PRECONDITIONREQUIRED = "428 PRECONDITION_REQUIRED",
  _429TOOMANYREQUESTS = "429 TOO_MANY_REQUESTS",
  _431REQUESTHEADERFIELDSTOOLARGE = "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
  _451UNAVAILABLEFORLEGALREASONS = "451 UNAVAILABLE_FOR_LEGAL_REASONS",
  _500INTERNALSERVERERROR = "500 INTERNAL_SERVER_ERROR",
  _501NOTIMPLEMENTED = "501 NOT_IMPLEMENTED",
  _502BADGATEWAY = "502 BAD_GATEWAY",
  _503SERVICEUNAVAILABLE = "503 SERVICE_UNAVAILABLE",
  _504GATEWAYTIMEOUT = "504 GATEWAY_TIMEOUT",
  _505HTTPVERSIONNOTSUPPORTED = "505 HTTP_VERSION_NOT_SUPPORTED",
  _506VARIANTALSONEGOTIATES = "506 VARIANT_ALSO_NEGOTIATES",
  _507INSUFFICIENTSTORAGE = "507 INSUFFICIENT_STORAGE",
  _508LOOPDETECTED = "508 LOOP_DETECTED",
  _509BANDWIDTHLIMITEXCEEDED = "509 BANDWIDTH_LIMIT_EXCEEDED",
  _510NOTEXTENDED = "510 NOT_EXTENDED",
  _511NETWORKAUTHENTICATIONREQUIRED = "511 NETWORK_AUTHENTICATION_REQUIRED"
}

/**
 *
 * @export
 * @interface BaseResponseModelEventModel
 */
export interface BaseResponseModelEventModel {
  /**
   *
   * @type {Array<EventModel>}
   * @memberof BaseResponseModelEventModel
   */
  data?: EventModel[];
  /**
   *
   * @type {ErrorModel}
   * @memberof BaseResponseModelEventModel
   */
  error?: ErrorModel;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelEventModel
   */
  status?: BaseResponseModelEventModelStatusEnum;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelEventModel
   */
  timestamp?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum BaseResponseModelEventModelStatusEnum {
  _100CONTINUE = "100 CONTINUE",
  _101SWITCHINGPROTOCOLS = "101 SWITCHING_PROTOCOLS",
  _102PROCESSING = "102 PROCESSING",
  _103CHECKPOINT = "103 CHECKPOINT",
  _200OK = "200 OK",
  _201CREATED = "201 CREATED",
  _202ACCEPTED = "202 ACCEPTED",
  _203NONAUTHORITATIVEINFORMATION = "203 NON_AUTHORITATIVE_INFORMATION",
  _204NOCONTENT = "204 NO_CONTENT",
  _205RESETCONTENT = "205 RESET_CONTENT",
  _206PARTIALCONTENT = "206 PARTIAL_CONTENT",
  _207MULTISTATUS = "207 MULTI_STATUS",
  _208ALREADYREPORTED = "208 ALREADY_REPORTED",
  _226IMUSED = "226 IM_USED",
  _300MULTIPLECHOICES = "300 MULTIPLE_CHOICES",
  _301MOVEDPERMANENTLY = "301 MOVED_PERMANENTLY",
  _302FOUND = "302 FOUND",
  _302MOVEDTEMPORARILY = "302 MOVED_TEMPORARILY",
  _303SEEOTHER = "303 SEE_OTHER",
  _304NOTMODIFIED = "304 NOT_MODIFIED",
  _305USEPROXY = "305 USE_PROXY",
  _307TEMPORARYREDIRECT = "307 TEMPORARY_REDIRECT",
  _308PERMANENTREDIRECT = "308 PERMANENT_REDIRECT",
  _400BADREQUEST = "400 BAD_REQUEST",
  _401UNAUTHORIZED = "401 UNAUTHORIZED",
  _402PAYMENTREQUIRED = "402 PAYMENT_REQUIRED",
  _403FORBIDDEN = "403 FORBIDDEN",
  _404NOTFOUND = "404 NOT_FOUND",
  _405METHODNOTALLOWED = "405 METHOD_NOT_ALLOWED",
  _406NOTACCEPTABLE = "406 NOT_ACCEPTABLE",
  _407PROXYAUTHENTICATIONREQUIRED = "407 PROXY_AUTHENTICATION_REQUIRED",
  _408REQUESTTIMEOUT = "408 REQUEST_TIMEOUT",
  _409CONFLICT = "409 CONFLICT",
  _410GONE = "410 GONE",
  _411LENGTHREQUIRED = "411 LENGTH_REQUIRED",
  _412PRECONDITIONFAILED = "412 PRECONDITION_FAILED",
  _413PAYLOADTOOLARGE = "413 PAYLOAD_TOO_LARGE",
  _413REQUESTENTITYTOOLARGE = "413 REQUEST_ENTITY_TOO_LARGE",
  _414URITOOLONG = "414 URI_TOO_LONG",
  _414REQUESTURITOOLONG = "414 REQUEST_URI_TOO_LONG",
  _415UNSUPPORTEDMEDIATYPE = "415 UNSUPPORTED_MEDIA_TYPE",
  _416REQUESTEDRANGENOTSATISFIABLE = "416 REQUESTED_RANGE_NOT_SATISFIABLE",
  _417EXPECTATIONFAILED = "417 EXPECTATION_FAILED",
  _418IAMATEAPOT = "418 I_AM_A_TEAPOT",
  _419INSUFFICIENTSPACEONRESOURCE = "419 INSUFFICIENT_SPACE_ON_RESOURCE",
  _420METHODFAILURE = "420 METHOD_FAILURE",
  _421DESTINATIONLOCKED = "421 DESTINATION_LOCKED",
  _422UNPROCESSABLEENTITY = "422 UNPROCESSABLE_ENTITY",
  _423LOCKED = "423 LOCKED",
  _424FAILEDDEPENDENCY = "424 FAILED_DEPENDENCY",
  _426UPGRADEREQUIRED = "426 UPGRADE_REQUIRED",
  _428PRECONDITIONREQUIRED = "428 PRECONDITION_REQUIRED",
  _429TOOMANYREQUESTS = "429 TOO_MANY_REQUESTS",
  _431REQUESTHEADERFIELDSTOOLARGE = "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
  _451UNAVAILABLEFORLEGALREASONS = "451 UNAVAILABLE_FOR_LEGAL_REASONS",
  _500INTERNALSERVERERROR = "500 INTERNAL_SERVER_ERROR",
  _501NOTIMPLEMENTED = "501 NOT_IMPLEMENTED",
  _502BADGATEWAY = "502 BAD_GATEWAY",
  _503SERVICEUNAVAILABLE = "503 SERVICE_UNAVAILABLE",
  _504GATEWAYTIMEOUT = "504 GATEWAY_TIMEOUT",
  _505HTTPVERSIONNOTSUPPORTED = "505 HTTP_VERSION_NOT_SUPPORTED",
  _506VARIANTALSONEGOTIATES = "506 VARIANT_ALSO_NEGOTIATES",
  _507INSUFFICIENTSTORAGE = "507 INSUFFICIENT_STORAGE",
  _508LOOPDETECTED = "508 LOOP_DETECTED",
  _509BANDWIDTHLIMITEXCEEDED = "509 BANDWIDTH_LIMIT_EXCEEDED",
  _510NOTEXTENDED = "510 NOT_EXTENDED",
  _511NETWORKAUTHENTICATIONREQUIRED = "511 NETWORK_AUTHENTICATION_REQUIRED"
}

/**
 *
 * @export
 * @interface BaseResponseModelFullUserProfileModel
 */
export interface BaseResponseModelFullUserProfileModel {
  /**
   *
   * @type {Array<FullUserProfileModel>}
   * @memberof BaseResponseModelFullUserProfileModel
   */
  data?: FullUserProfileModel[];
  /**
   *
   * @type {ErrorModel}
   * @memberof BaseResponseModelFullUserProfileModel
   */
  error?: ErrorModel;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelFullUserProfileModel
   */
  status?: BaseResponseModelFullUserProfileModelStatusEnum;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelFullUserProfileModel
   */
  timestamp?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum BaseResponseModelFullUserProfileModelStatusEnum {
  _100CONTINUE = "100 CONTINUE",
  _101SWITCHINGPROTOCOLS = "101 SWITCHING_PROTOCOLS",
  _102PROCESSING = "102 PROCESSING",
  _103CHECKPOINT = "103 CHECKPOINT",
  _200OK = "200 OK",
  _201CREATED = "201 CREATED",
  _202ACCEPTED = "202 ACCEPTED",
  _203NONAUTHORITATIVEINFORMATION = "203 NON_AUTHORITATIVE_INFORMATION",
  _204NOCONTENT = "204 NO_CONTENT",
  _205RESETCONTENT = "205 RESET_CONTENT",
  _206PARTIALCONTENT = "206 PARTIAL_CONTENT",
  _207MULTISTATUS = "207 MULTI_STATUS",
  _208ALREADYREPORTED = "208 ALREADY_REPORTED",
  _226IMUSED = "226 IM_USED",
  _300MULTIPLECHOICES = "300 MULTIPLE_CHOICES",
  _301MOVEDPERMANENTLY = "301 MOVED_PERMANENTLY",
  _302FOUND = "302 FOUND",
  _302MOVEDTEMPORARILY = "302 MOVED_TEMPORARILY",
  _303SEEOTHER = "303 SEE_OTHER",
  _304NOTMODIFIED = "304 NOT_MODIFIED",
  _305USEPROXY = "305 USE_PROXY",
  _307TEMPORARYREDIRECT = "307 TEMPORARY_REDIRECT",
  _308PERMANENTREDIRECT = "308 PERMANENT_REDIRECT",
  _400BADREQUEST = "400 BAD_REQUEST",
  _401UNAUTHORIZED = "401 UNAUTHORIZED",
  _402PAYMENTREQUIRED = "402 PAYMENT_REQUIRED",
  _403FORBIDDEN = "403 FORBIDDEN",
  _404NOTFOUND = "404 NOT_FOUND",
  _405METHODNOTALLOWED = "405 METHOD_NOT_ALLOWED",
  _406NOTACCEPTABLE = "406 NOT_ACCEPTABLE",
  _407PROXYAUTHENTICATIONREQUIRED = "407 PROXY_AUTHENTICATION_REQUIRED",
  _408REQUESTTIMEOUT = "408 REQUEST_TIMEOUT",
  _409CONFLICT = "409 CONFLICT",
  _410GONE = "410 GONE",
  _411LENGTHREQUIRED = "411 LENGTH_REQUIRED",
  _412PRECONDITIONFAILED = "412 PRECONDITION_FAILED",
  _413PAYLOADTOOLARGE = "413 PAYLOAD_TOO_LARGE",
  _413REQUESTENTITYTOOLARGE = "413 REQUEST_ENTITY_TOO_LARGE",
  _414URITOOLONG = "414 URI_TOO_LONG",
  _414REQUESTURITOOLONG = "414 REQUEST_URI_TOO_LONG",
  _415UNSUPPORTEDMEDIATYPE = "415 UNSUPPORTED_MEDIA_TYPE",
  _416REQUESTEDRANGENOTSATISFIABLE = "416 REQUESTED_RANGE_NOT_SATISFIABLE",
  _417EXPECTATIONFAILED = "417 EXPECTATION_FAILED",
  _418IAMATEAPOT = "418 I_AM_A_TEAPOT",
  _419INSUFFICIENTSPACEONRESOURCE = "419 INSUFFICIENT_SPACE_ON_RESOURCE",
  _420METHODFAILURE = "420 METHOD_FAILURE",
  _421DESTINATIONLOCKED = "421 DESTINATION_LOCKED",
  _422UNPROCESSABLEENTITY = "422 UNPROCESSABLE_ENTITY",
  _423LOCKED = "423 LOCKED",
  _424FAILEDDEPENDENCY = "424 FAILED_DEPENDENCY",
  _426UPGRADEREQUIRED = "426 UPGRADE_REQUIRED",
  _428PRECONDITIONREQUIRED = "428 PRECONDITION_REQUIRED",
  _429TOOMANYREQUESTS = "429 TOO_MANY_REQUESTS",
  _431REQUESTHEADERFIELDSTOOLARGE = "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
  _451UNAVAILABLEFORLEGALREASONS = "451 UNAVAILABLE_FOR_LEGAL_REASONS",
  _500INTERNALSERVERERROR = "500 INTERNAL_SERVER_ERROR",
  _501NOTIMPLEMENTED = "501 NOT_IMPLEMENTED",
  _502BADGATEWAY = "502 BAD_GATEWAY",
  _503SERVICEUNAVAILABLE = "503 SERVICE_UNAVAILABLE",
  _504GATEWAYTIMEOUT = "504 GATEWAY_TIMEOUT",
  _505HTTPVERSIONNOTSUPPORTED = "505 HTTP_VERSION_NOT_SUPPORTED",
  _506VARIANTALSONEGOTIATES = "506 VARIANT_ALSO_NEGOTIATES",
  _507INSUFFICIENTSTORAGE = "507 INSUFFICIENT_STORAGE",
  _508LOOPDETECTED = "508 LOOP_DETECTED",
  _509BANDWIDTHLIMITEXCEEDED = "509 BANDWIDTH_LIMIT_EXCEEDED",
  _510NOTEXTENDED = "510 NOT_EXTENDED",
  _511NETWORKAUTHENTICATIONREQUIRED = "511 NETWORK_AUTHENTICATION_REQUIRED"
}

/**
 *
 * @export
 * @interface BaseResponseModelPaymentSourceCollection
 */
export interface BaseResponseModelPaymentSourceCollection {
  /**
   *
   * @type {Array<PaymentSourceCollection>}
   * @memberof BaseResponseModelPaymentSourceCollection
   */
  data?: PaymentSourceCollection[];
  /**
   *
   * @type {ErrorModel}
   * @memberof BaseResponseModelPaymentSourceCollection
   */
  error?: ErrorModel;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelPaymentSourceCollection
   */
  status?: BaseResponseModelPaymentSourceCollectionStatusEnum;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelPaymentSourceCollection
   */
  timestamp?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum BaseResponseModelPaymentSourceCollectionStatusEnum {
  _100CONTINUE = "100 CONTINUE",
  _101SWITCHINGPROTOCOLS = "101 SWITCHING_PROTOCOLS",
  _102PROCESSING = "102 PROCESSING",
  _103CHECKPOINT = "103 CHECKPOINT",
  _200OK = "200 OK",
  _201CREATED = "201 CREATED",
  _202ACCEPTED = "202 ACCEPTED",
  _203NONAUTHORITATIVEINFORMATION = "203 NON_AUTHORITATIVE_INFORMATION",
  _204NOCONTENT = "204 NO_CONTENT",
  _205RESETCONTENT = "205 RESET_CONTENT",
  _206PARTIALCONTENT = "206 PARTIAL_CONTENT",
  _207MULTISTATUS = "207 MULTI_STATUS",
  _208ALREADYREPORTED = "208 ALREADY_REPORTED",
  _226IMUSED = "226 IM_USED",
  _300MULTIPLECHOICES = "300 MULTIPLE_CHOICES",
  _301MOVEDPERMANENTLY = "301 MOVED_PERMANENTLY",
  _302FOUND = "302 FOUND",
  _302MOVEDTEMPORARILY = "302 MOVED_TEMPORARILY",
  _303SEEOTHER = "303 SEE_OTHER",
  _304NOTMODIFIED = "304 NOT_MODIFIED",
  _305USEPROXY = "305 USE_PROXY",
  _307TEMPORARYREDIRECT = "307 TEMPORARY_REDIRECT",
  _308PERMANENTREDIRECT = "308 PERMANENT_REDIRECT",
  _400BADREQUEST = "400 BAD_REQUEST",
  _401UNAUTHORIZED = "401 UNAUTHORIZED",
  _402PAYMENTREQUIRED = "402 PAYMENT_REQUIRED",
  _403FORBIDDEN = "403 FORBIDDEN",
  _404NOTFOUND = "404 NOT_FOUND",
  _405METHODNOTALLOWED = "405 METHOD_NOT_ALLOWED",
  _406NOTACCEPTABLE = "406 NOT_ACCEPTABLE",
  _407PROXYAUTHENTICATIONREQUIRED = "407 PROXY_AUTHENTICATION_REQUIRED",
  _408REQUESTTIMEOUT = "408 REQUEST_TIMEOUT",
  _409CONFLICT = "409 CONFLICT",
  _410GONE = "410 GONE",
  _411LENGTHREQUIRED = "411 LENGTH_REQUIRED",
  _412PRECONDITIONFAILED = "412 PRECONDITION_FAILED",
  _413PAYLOADTOOLARGE = "413 PAYLOAD_TOO_LARGE",
  _413REQUESTENTITYTOOLARGE = "413 REQUEST_ENTITY_TOO_LARGE",
  _414URITOOLONG = "414 URI_TOO_LONG",
  _414REQUESTURITOOLONG = "414 REQUEST_URI_TOO_LONG",
  _415UNSUPPORTEDMEDIATYPE = "415 UNSUPPORTED_MEDIA_TYPE",
  _416REQUESTEDRANGENOTSATISFIABLE = "416 REQUESTED_RANGE_NOT_SATISFIABLE",
  _417EXPECTATIONFAILED = "417 EXPECTATION_FAILED",
  _418IAMATEAPOT = "418 I_AM_A_TEAPOT",
  _419INSUFFICIENTSPACEONRESOURCE = "419 INSUFFICIENT_SPACE_ON_RESOURCE",
  _420METHODFAILURE = "420 METHOD_FAILURE",
  _421DESTINATIONLOCKED = "421 DESTINATION_LOCKED",
  _422UNPROCESSABLEENTITY = "422 UNPROCESSABLE_ENTITY",
  _423LOCKED = "423 LOCKED",
  _424FAILEDDEPENDENCY = "424 FAILED_DEPENDENCY",
  _426UPGRADEREQUIRED = "426 UPGRADE_REQUIRED",
  _428PRECONDITIONREQUIRED = "428 PRECONDITION_REQUIRED",
  _429TOOMANYREQUESTS = "429 TOO_MANY_REQUESTS",
  _431REQUESTHEADERFIELDSTOOLARGE = "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
  _451UNAVAILABLEFORLEGALREASONS = "451 UNAVAILABLE_FOR_LEGAL_REASONS",
  _500INTERNALSERVERERROR = "500 INTERNAL_SERVER_ERROR",
  _501NOTIMPLEMENTED = "501 NOT_IMPLEMENTED",
  _502BADGATEWAY = "502 BAD_GATEWAY",
  _503SERVICEUNAVAILABLE = "503 SERVICE_UNAVAILABLE",
  _504GATEWAYTIMEOUT = "504 GATEWAY_TIMEOUT",
  _505HTTPVERSIONNOTSUPPORTED = "505 HTTP_VERSION_NOT_SUPPORTED",
  _506VARIANTALSONEGOTIATES = "506 VARIANT_ALSO_NEGOTIATES",
  _507INSUFFICIENTSTORAGE = "507 INSUFFICIENT_STORAGE",
  _508LOOPDETECTED = "508 LOOP_DETECTED",
  _509BANDWIDTHLIMITEXCEEDED = "509 BANDWIDTH_LIMIT_EXCEEDED",
  _510NOTEXTENDED = "510 NOT_EXTENDED",
  _511NETWORKAUTHENTICATIONREQUIRED = "511 NETWORK_AUTHENTICATION_REQUIRED"
}

/**
 *
 * @export
 * @interface BaseResponseModelUpdateProfileImageModel
 */
export interface BaseResponseModelUpdateProfileImageModel {
  /**
   *
   * @type {Array<UpdateProfileImageModel>}
   * @memberof BaseResponseModelUpdateProfileImageModel
   */
  data?: UpdateProfileImageModel[];
  /**
   *
   * @type {ErrorModel}
   * @memberof BaseResponseModelUpdateProfileImageModel
   */
  error?: ErrorModel;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelUpdateProfileImageModel
   */
  status?: BaseResponseModelUpdateProfileImageModelStatusEnum;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelUpdateProfileImageModel
   */
  timestamp?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum BaseResponseModelUpdateProfileImageModelStatusEnum {
  _100CONTINUE = "100 CONTINUE",
  _101SWITCHINGPROTOCOLS = "101 SWITCHING_PROTOCOLS",
  _102PROCESSING = "102 PROCESSING",
  _103CHECKPOINT = "103 CHECKPOINT",
  _200OK = "200 OK",
  _201CREATED = "201 CREATED",
  _202ACCEPTED = "202 ACCEPTED",
  _203NONAUTHORITATIVEINFORMATION = "203 NON_AUTHORITATIVE_INFORMATION",
  _204NOCONTENT = "204 NO_CONTENT",
  _205RESETCONTENT = "205 RESET_CONTENT",
  _206PARTIALCONTENT = "206 PARTIAL_CONTENT",
  _207MULTISTATUS = "207 MULTI_STATUS",
  _208ALREADYREPORTED = "208 ALREADY_REPORTED",
  _226IMUSED = "226 IM_USED",
  _300MULTIPLECHOICES = "300 MULTIPLE_CHOICES",
  _301MOVEDPERMANENTLY = "301 MOVED_PERMANENTLY",
  _302FOUND = "302 FOUND",
  _302MOVEDTEMPORARILY = "302 MOVED_TEMPORARILY",
  _303SEEOTHER = "303 SEE_OTHER",
  _304NOTMODIFIED = "304 NOT_MODIFIED",
  _305USEPROXY = "305 USE_PROXY",
  _307TEMPORARYREDIRECT = "307 TEMPORARY_REDIRECT",
  _308PERMANENTREDIRECT = "308 PERMANENT_REDIRECT",
  _400BADREQUEST = "400 BAD_REQUEST",
  _401UNAUTHORIZED = "401 UNAUTHORIZED",
  _402PAYMENTREQUIRED = "402 PAYMENT_REQUIRED",
  _403FORBIDDEN = "403 FORBIDDEN",
  _404NOTFOUND = "404 NOT_FOUND",
  _405METHODNOTALLOWED = "405 METHOD_NOT_ALLOWED",
  _406NOTACCEPTABLE = "406 NOT_ACCEPTABLE",
  _407PROXYAUTHENTICATIONREQUIRED = "407 PROXY_AUTHENTICATION_REQUIRED",
  _408REQUESTTIMEOUT = "408 REQUEST_TIMEOUT",
  _409CONFLICT = "409 CONFLICT",
  _410GONE = "410 GONE",
  _411LENGTHREQUIRED = "411 LENGTH_REQUIRED",
  _412PRECONDITIONFAILED = "412 PRECONDITION_FAILED",
  _413PAYLOADTOOLARGE = "413 PAYLOAD_TOO_LARGE",
  _413REQUESTENTITYTOOLARGE = "413 REQUEST_ENTITY_TOO_LARGE",
  _414URITOOLONG = "414 URI_TOO_LONG",
  _414REQUESTURITOOLONG = "414 REQUEST_URI_TOO_LONG",
  _415UNSUPPORTEDMEDIATYPE = "415 UNSUPPORTED_MEDIA_TYPE",
  _416REQUESTEDRANGENOTSATISFIABLE = "416 REQUESTED_RANGE_NOT_SATISFIABLE",
  _417EXPECTATIONFAILED = "417 EXPECTATION_FAILED",
  _418IAMATEAPOT = "418 I_AM_A_TEAPOT",
  _419INSUFFICIENTSPACEONRESOURCE = "419 INSUFFICIENT_SPACE_ON_RESOURCE",
  _420METHODFAILURE = "420 METHOD_FAILURE",
  _421DESTINATIONLOCKED = "421 DESTINATION_LOCKED",
  _422UNPROCESSABLEENTITY = "422 UNPROCESSABLE_ENTITY",
  _423LOCKED = "423 LOCKED",
  _424FAILEDDEPENDENCY = "424 FAILED_DEPENDENCY",
  _426UPGRADEREQUIRED = "426 UPGRADE_REQUIRED",
  _428PRECONDITIONREQUIRED = "428 PRECONDITION_REQUIRED",
  _429TOOMANYREQUESTS = "429 TOO_MANY_REQUESTS",
  _431REQUESTHEADERFIELDSTOOLARGE = "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
  _451UNAVAILABLEFORLEGALREASONS = "451 UNAVAILABLE_FOR_LEGAL_REASONS",
  _500INTERNALSERVERERROR = "500 INTERNAL_SERVER_ERROR",
  _501NOTIMPLEMENTED = "501 NOT_IMPLEMENTED",
  _502BADGATEWAY = "502 BAD_GATEWAY",
  _503SERVICEUNAVAILABLE = "503 SERVICE_UNAVAILABLE",
  _504GATEWAYTIMEOUT = "504 GATEWAY_TIMEOUT",
  _505HTTPVERSIONNOTSUPPORTED = "505 HTTP_VERSION_NOT_SUPPORTED",
  _506VARIANTALSONEGOTIATES = "506 VARIANT_ALSO_NEGOTIATES",
  _507INSUFFICIENTSTORAGE = "507 INSUFFICIENT_STORAGE",
  _508LOOPDETECTED = "508 LOOP_DETECTED",
  _509BANDWIDTHLIMITEXCEEDED = "509 BANDWIDTH_LIMIT_EXCEEDED",
  _510NOTEXTENDED = "510 NOT_EXTENDED",
  _511NETWORKAUTHENTICATIONREQUIRED = "511 NETWORK_AUTHENTICATION_REQUIRED"
}

/**
 *
 * @export
 * @interface BaseResponseModelUserProfileModel
 */
export interface BaseResponseModelUserProfileModel {
  /**
   *
   * @type {Array<UserProfileModel>}
   * @memberof BaseResponseModelUserProfileModel
   */
  data?: UserProfileModel[];
  /**
   *
   * @type {ErrorModel}
   * @memberof BaseResponseModelUserProfileModel
   */
  error?: ErrorModel;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelUserProfileModel
   */
  status?: BaseResponseModelUserProfileModelStatusEnum;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelUserProfileModel
   */
  timestamp?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum BaseResponseModelUserProfileModelStatusEnum {
  _100CONTINUE = "100 CONTINUE",
  _101SWITCHINGPROTOCOLS = "101 SWITCHING_PROTOCOLS",
  _102PROCESSING = "102 PROCESSING",
  _103CHECKPOINT = "103 CHECKPOINT",
  _200OK = "200 OK",
  _201CREATED = "201 CREATED",
  _202ACCEPTED = "202 ACCEPTED",
  _203NONAUTHORITATIVEINFORMATION = "203 NON_AUTHORITATIVE_INFORMATION",
  _204NOCONTENT = "204 NO_CONTENT",
  _205RESETCONTENT = "205 RESET_CONTENT",
  _206PARTIALCONTENT = "206 PARTIAL_CONTENT",
  _207MULTISTATUS = "207 MULTI_STATUS",
  _208ALREADYREPORTED = "208 ALREADY_REPORTED",
  _226IMUSED = "226 IM_USED",
  _300MULTIPLECHOICES = "300 MULTIPLE_CHOICES",
  _301MOVEDPERMANENTLY = "301 MOVED_PERMANENTLY",
  _302FOUND = "302 FOUND",
  _302MOVEDTEMPORARILY = "302 MOVED_TEMPORARILY",
  _303SEEOTHER = "303 SEE_OTHER",
  _304NOTMODIFIED = "304 NOT_MODIFIED",
  _305USEPROXY = "305 USE_PROXY",
  _307TEMPORARYREDIRECT = "307 TEMPORARY_REDIRECT",
  _308PERMANENTREDIRECT = "308 PERMANENT_REDIRECT",
  _400BADREQUEST = "400 BAD_REQUEST",
  _401UNAUTHORIZED = "401 UNAUTHORIZED",
  _402PAYMENTREQUIRED = "402 PAYMENT_REQUIRED",
  _403FORBIDDEN = "403 FORBIDDEN",
  _404NOTFOUND = "404 NOT_FOUND",
  _405METHODNOTALLOWED = "405 METHOD_NOT_ALLOWED",
  _406NOTACCEPTABLE = "406 NOT_ACCEPTABLE",
  _407PROXYAUTHENTICATIONREQUIRED = "407 PROXY_AUTHENTICATION_REQUIRED",
  _408REQUESTTIMEOUT = "408 REQUEST_TIMEOUT",
  _409CONFLICT = "409 CONFLICT",
  _410GONE = "410 GONE",
  _411LENGTHREQUIRED = "411 LENGTH_REQUIRED",
  _412PRECONDITIONFAILED = "412 PRECONDITION_FAILED",
  _413PAYLOADTOOLARGE = "413 PAYLOAD_TOO_LARGE",
  _413REQUESTENTITYTOOLARGE = "413 REQUEST_ENTITY_TOO_LARGE",
  _414URITOOLONG = "414 URI_TOO_LONG",
  _414REQUESTURITOOLONG = "414 REQUEST_URI_TOO_LONG",
  _415UNSUPPORTEDMEDIATYPE = "415 UNSUPPORTED_MEDIA_TYPE",
  _416REQUESTEDRANGENOTSATISFIABLE = "416 REQUESTED_RANGE_NOT_SATISFIABLE",
  _417EXPECTATIONFAILED = "417 EXPECTATION_FAILED",
  _418IAMATEAPOT = "418 I_AM_A_TEAPOT",
  _419INSUFFICIENTSPACEONRESOURCE = "419 INSUFFICIENT_SPACE_ON_RESOURCE",
  _420METHODFAILURE = "420 METHOD_FAILURE",
  _421DESTINATIONLOCKED = "421 DESTINATION_LOCKED",
  _422UNPROCESSABLEENTITY = "422 UNPROCESSABLE_ENTITY",
  _423LOCKED = "423 LOCKED",
  _424FAILEDDEPENDENCY = "424 FAILED_DEPENDENCY",
  _426UPGRADEREQUIRED = "426 UPGRADE_REQUIRED",
  _428PRECONDITIONREQUIRED = "428 PRECONDITION_REQUIRED",
  _429TOOMANYREQUESTS = "429 TOO_MANY_REQUESTS",
  _431REQUESTHEADERFIELDSTOOLARGE = "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
  _451UNAVAILABLEFORLEGALREASONS = "451 UNAVAILABLE_FOR_LEGAL_REASONS",
  _500INTERNALSERVERERROR = "500 INTERNAL_SERVER_ERROR",
  _501NOTIMPLEMENTED = "501 NOT_IMPLEMENTED",
  _502BADGATEWAY = "502 BAD_GATEWAY",
  _503SERVICEUNAVAILABLE = "503 SERVICE_UNAVAILABLE",
  _504GATEWAYTIMEOUT = "504 GATEWAY_TIMEOUT",
  _505HTTPVERSIONNOTSUPPORTED = "505 HTTP_VERSION_NOT_SUPPORTED",
  _506VARIANTALSONEGOTIATES = "506 VARIANT_ALSO_NEGOTIATES",
  _507INSUFFICIENTSTORAGE = "507 INSUFFICIENT_STORAGE",
  _508LOOPDETECTED = "508 LOOP_DETECTED",
  _509BANDWIDTHLIMITEXCEEDED = "509 BANDWIDTH_LIMIT_EXCEEDED",
  _510NOTEXTENDED = "510 NOT_EXTENDED",
  _511NETWORKAUTHENTICATIONREQUIRED = "511 NETWORK_AUTHENTICATION_REQUIRED"
}

/**
 *
 * @export
 * @interface BaseResponseModelUserRelationshipModel
 */
export interface BaseResponseModelUserRelationshipModel {
  /**
   *
   * @type {Array<UserRelationshipModel>}
   * @memberof BaseResponseModelUserRelationshipModel
   */
  data?: UserRelationshipModel[];
  /**
   *
   * @type {ErrorModel}
   * @memberof BaseResponseModelUserRelationshipModel
   */
  error?: ErrorModel;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelUserRelationshipModel
   */
  status?: BaseResponseModelUserRelationshipModelStatusEnum;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelUserRelationshipModel
   */
  timestamp?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum BaseResponseModelUserRelationshipModelStatusEnum {
  _100CONTINUE = "100 CONTINUE",
  _101SWITCHINGPROTOCOLS = "101 SWITCHING_PROTOCOLS",
  _102PROCESSING = "102 PROCESSING",
  _103CHECKPOINT = "103 CHECKPOINT",
  _200OK = "200 OK",
  _201CREATED = "201 CREATED",
  _202ACCEPTED = "202 ACCEPTED",
  _203NONAUTHORITATIVEINFORMATION = "203 NON_AUTHORITATIVE_INFORMATION",
  _204NOCONTENT = "204 NO_CONTENT",
  _205RESETCONTENT = "205 RESET_CONTENT",
  _206PARTIALCONTENT = "206 PARTIAL_CONTENT",
  _207MULTISTATUS = "207 MULTI_STATUS",
  _208ALREADYREPORTED = "208 ALREADY_REPORTED",
  _226IMUSED = "226 IM_USED",
  _300MULTIPLECHOICES = "300 MULTIPLE_CHOICES",
  _301MOVEDPERMANENTLY = "301 MOVED_PERMANENTLY",
  _302FOUND = "302 FOUND",
  _302MOVEDTEMPORARILY = "302 MOVED_TEMPORARILY",
  _303SEEOTHER = "303 SEE_OTHER",
  _304NOTMODIFIED = "304 NOT_MODIFIED",
  _305USEPROXY = "305 USE_PROXY",
  _307TEMPORARYREDIRECT = "307 TEMPORARY_REDIRECT",
  _308PERMANENTREDIRECT = "308 PERMANENT_REDIRECT",
  _400BADREQUEST = "400 BAD_REQUEST",
  _401UNAUTHORIZED = "401 UNAUTHORIZED",
  _402PAYMENTREQUIRED = "402 PAYMENT_REQUIRED",
  _403FORBIDDEN = "403 FORBIDDEN",
  _404NOTFOUND = "404 NOT_FOUND",
  _405METHODNOTALLOWED = "405 METHOD_NOT_ALLOWED",
  _406NOTACCEPTABLE = "406 NOT_ACCEPTABLE",
  _407PROXYAUTHENTICATIONREQUIRED = "407 PROXY_AUTHENTICATION_REQUIRED",
  _408REQUESTTIMEOUT = "408 REQUEST_TIMEOUT",
  _409CONFLICT = "409 CONFLICT",
  _410GONE = "410 GONE",
  _411LENGTHREQUIRED = "411 LENGTH_REQUIRED",
  _412PRECONDITIONFAILED = "412 PRECONDITION_FAILED",
  _413PAYLOADTOOLARGE = "413 PAYLOAD_TOO_LARGE",
  _413REQUESTENTITYTOOLARGE = "413 REQUEST_ENTITY_TOO_LARGE",
  _414URITOOLONG = "414 URI_TOO_LONG",
  _414REQUESTURITOOLONG = "414 REQUEST_URI_TOO_LONG",
  _415UNSUPPORTEDMEDIATYPE = "415 UNSUPPORTED_MEDIA_TYPE",
  _416REQUESTEDRANGENOTSATISFIABLE = "416 REQUESTED_RANGE_NOT_SATISFIABLE",
  _417EXPECTATIONFAILED = "417 EXPECTATION_FAILED",
  _418IAMATEAPOT = "418 I_AM_A_TEAPOT",
  _419INSUFFICIENTSPACEONRESOURCE = "419 INSUFFICIENT_SPACE_ON_RESOURCE",
  _420METHODFAILURE = "420 METHOD_FAILURE",
  _421DESTINATIONLOCKED = "421 DESTINATION_LOCKED",
  _422UNPROCESSABLEENTITY = "422 UNPROCESSABLE_ENTITY",
  _423LOCKED = "423 LOCKED",
  _424FAILEDDEPENDENCY = "424 FAILED_DEPENDENCY",
  _426UPGRADEREQUIRED = "426 UPGRADE_REQUIRED",
  _428PRECONDITIONREQUIRED = "428 PRECONDITION_REQUIRED",
  _429TOOMANYREQUESTS = "429 TOO_MANY_REQUESTS",
  _431REQUESTHEADERFIELDSTOOLARGE = "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
  _451UNAVAILABLEFORLEGALREASONS = "451 UNAVAILABLE_FOR_LEGAL_REASONS",
  _500INTERNALSERVERERROR = "500 INTERNAL_SERVER_ERROR",
  _501NOTIMPLEMENTED = "501 NOT_IMPLEMENTED",
  _502BADGATEWAY = "502 BAD_GATEWAY",
  _503SERVICEUNAVAILABLE = "503 SERVICE_UNAVAILABLE",
  _504GATEWAYTIMEOUT = "504 GATEWAY_TIMEOUT",
  _505HTTPVERSIONNOTSUPPORTED = "505 HTTP_VERSION_NOT_SUPPORTED",
  _506VARIANTALSONEGOTIATES = "506 VARIANT_ALSO_NEGOTIATES",
  _507INSUFFICIENTSTORAGE = "507 INSUFFICIENT_STORAGE",
  _508LOOPDETECTED = "508 LOOP_DETECTED",
  _509BANDWIDTHLIMITEXCEEDED = "509 BANDWIDTH_LIMIT_EXCEEDED",
  _510NOTEXTENDED = "510 NOT_EXTENDED",
  _511NETWORKAUTHENTICATIONREQUIRED = "511 NETWORK_AUTHENTICATION_REQUIRED"
}

/**
 *
 * @export
 * @interface BaseResponseModelobject
 */
export interface BaseResponseModelobject {
  /**
   *
   * @type {Array<object>}
   * @memberof BaseResponseModelobject
   */
  data?: object[];
  /**
   *
   * @type {ErrorModel}
   * @memberof BaseResponseModelobject
   */
  error?: ErrorModel;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelobject
   */
  status?: BaseResponseModelobjectStatusEnum;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelobject
   */
  timestamp?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum BaseResponseModelobjectStatusEnum {
  _100CONTINUE = "100 CONTINUE",
  _101SWITCHINGPROTOCOLS = "101 SWITCHING_PROTOCOLS",
  _102PROCESSING = "102 PROCESSING",
  _103CHECKPOINT = "103 CHECKPOINT",
  _200OK = "200 OK",
  _201CREATED = "201 CREATED",
  _202ACCEPTED = "202 ACCEPTED",
  _203NONAUTHORITATIVEINFORMATION = "203 NON_AUTHORITATIVE_INFORMATION",
  _204NOCONTENT = "204 NO_CONTENT",
  _205RESETCONTENT = "205 RESET_CONTENT",
  _206PARTIALCONTENT = "206 PARTIAL_CONTENT",
  _207MULTISTATUS = "207 MULTI_STATUS",
  _208ALREADYREPORTED = "208 ALREADY_REPORTED",
  _226IMUSED = "226 IM_USED",
  _300MULTIPLECHOICES = "300 MULTIPLE_CHOICES",
  _301MOVEDPERMANENTLY = "301 MOVED_PERMANENTLY",
  _302FOUND = "302 FOUND",
  _302MOVEDTEMPORARILY = "302 MOVED_TEMPORARILY",
  _303SEEOTHER = "303 SEE_OTHER",
  _304NOTMODIFIED = "304 NOT_MODIFIED",
  _305USEPROXY = "305 USE_PROXY",
  _307TEMPORARYREDIRECT = "307 TEMPORARY_REDIRECT",
  _308PERMANENTREDIRECT = "308 PERMANENT_REDIRECT",
  _400BADREQUEST = "400 BAD_REQUEST",
  _401UNAUTHORIZED = "401 UNAUTHORIZED",
  _402PAYMENTREQUIRED = "402 PAYMENT_REQUIRED",
  _403FORBIDDEN = "403 FORBIDDEN",
  _404NOTFOUND = "404 NOT_FOUND",
  _405METHODNOTALLOWED = "405 METHOD_NOT_ALLOWED",
  _406NOTACCEPTABLE = "406 NOT_ACCEPTABLE",
  _407PROXYAUTHENTICATIONREQUIRED = "407 PROXY_AUTHENTICATION_REQUIRED",
  _408REQUESTTIMEOUT = "408 REQUEST_TIMEOUT",
  _409CONFLICT = "409 CONFLICT",
  _410GONE = "410 GONE",
  _411LENGTHREQUIRED = "411 LENGTH_REQUIRED",
  _412PRECONDITIONFAILED = "412 PRECONDITION_FAILED",
  _413PAYLOADTOOLARGE = "413 PAYLOAD_TOO_LARGE",
  _413REQUESTENTITYTOOLARGE = "413 REQUEST_ENTITY_TOO_LARGE",
  _414URITOOLONG = "414 URI_TOO_LONG",
  _414REQUESTURITOOLONG = "414 REQUEST_URI_TOO_LONG",
  _415UNSUPPORTEDMEDIATYPE = "415 UNSUPPORTED_MEDIA_TYPE",
  _416REQUESTEDRANGENOTSATISFIABLE = "416 REQUESTED_RANGE_NOT_SATISFIABLE",
  _417EXPECTATIONFAILED = "417 EXPECTATION_FAILED",
  _418IAMATEAPOT = "418 I_AM_A_TEAPOT",
  _419INSUFFICIENTSPACEONRESOURCE = "419 INSUFFICIENT_SPACE_ON_RESOURCE",
  _420METHODFAILURE = "420 METHOD_FAILURE",
  _421DESTINATIONLOCKED = "421 DESTINATION_LOCKED",
  _422UNPROCESSABLEENTITY = "422 UNPROCESSABLE_ENTITY",
  _423LOCKED = "423 LOCKED",
  _424FAILEDDEPENDENCY = "424 FAILED_DEPENDENCY",
  _426UPGRADEREQUIRED = "426 UPGRADE_REQUIRED",
  _428PRECONDITIONREQUIRED = "428 PRECONDITION_REQUIRED",
  _429TOOMANYREQUESTS = "429 TOO_MANY_REQUESTS",
  _431REQUESTHEADERFIELDSTOOLARGE = "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
  _451UNAVAILABLEFORLEGALREASONS = "451 UNAVAILABLE_FOR_LEGAL_REASONS",
  _500INTERNALSERVERERROR = "500 INTERNAL_SERVER_ERROR",
  _501NOTIMPLEMENTED = "501 NOT_IMPLEMENTED",
  _502BADGATEWAY = "502 BAD_GATEWAY",
  _503SERVICEUNAVAILABLE = "503 SERVICE_UNAVAILABLE",
  _504GATEWAYTIMEOUT = "504 GATEWAY_TIMEOUT",
  _505HTTPVERSIONNOTSUPPORTED = "505 HTTP_VERSION_NOT_SUPPORTED",
  _506VARIANTALSONEGOTIATES = "506 VARIANT_ALSO_NEGOTIATES",
  _507INSUFFICIENTSTORAGE = "507 INSUFFICIENT_STORAGE",
  _508LOOPDETECTED = "508 LOOP_DETECTED",
  _509BANDWIDTHLIMITEXCEEDED = "509 BANDWIDTH_LIMIT_EXCEEDED",
  _510NOTEXTENDED = "510 NOT_EXTENDED",
  _511NETWORKAUTHENTICATIONREQUIRED = "511 NETWORK_AUTHENTICATION_REQUIRED"
}

/**
 *
 * @export
 * @interface BaseResponseModelstring
 */
export interface BaseResponseModelstring {
  /**
   *
   * @type {Array<string>}
   * @memberof BaseResponseModelstring
   */
  data?: string[];
  /**
   *
   * @type {ErrorModel}
   * @memberof BaseResponseModelstring
   */
  error?: ErrorModel;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelstring
   */
  status?: BaseResponseModelstringStatusEnum;
  /**
   *
   * @type {string}
   * @memberof BaseResponseModelstring
   */
  timestamp?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum BaseResponseModelstringStatusEnum {
  _100CONTINUE = "100 CONTINUE",
  _101SWITCHINGPROTOCOLS = "101 SWITCHING_PROTOCOLS",
  _102PROCESSING = "102 PROCESSING",
  _103CHECKPOINT = "103 CHECKPOINT",
  _200OK = "200 OK",
  _201CREATED = "201 CREATED",
  _202ACCEPTED = "202 ACCEPTED",
  _203NONAUTHORITATIVEINFORMATION = "203 NON_AUTHORITATIVE_INFORMATION",
  _204NOCONTENT = "204 NO_CONTENT",
  _205RESETCONTENT = "205 RESET_CONTENT",
  _206PARTIALCONTENT = "206 PARTIAL_CONTENT",
  _207MULTISTATUS = "207 MULTI_STATUS",
  _208ALREADYREPORTED = "208 ALREADY_REPORTED",
  _226IMUSED = "226 IM_USED",
  _300MULTIPLECHOICES = "300 MULTIPLE_CHOICES",
  _301MOVEDPERMANENTLY = "301 MOVED_PERMANENTLY",
  _302FOUND = "302 FOUND",
  _302MOVEDTEMPORARILY = "302 MOVED_TEMPORARILY",
  _303SEEOTHER = "303 SEE_OTHER",
  _304NOTMODIFIED = "304 NOT_MODIFIED",
  _305USEPROXY = "305 USE_PROXY",
  _307TEMPORARYREDIRECT = "307 TEMPORARY_REDIRECT",
  _308PERMANENTREDIRECT = "308 PERMANENT_REDIRECT",
  _400BADREQUEST = "400 BAD_REQUEST",
  _401UNAUTHORIZED = "401 UNAUTHORIZED",
  _402PAYMENTREQUIRED = "402 PAYMENT_REQUIRED",
  _403FORBIDDEN = "403 FORBIDDEN",
  _404NOTFOUND = "404 NOT_FOUND",
  _405METHODNOTALLOWED = "405 METHOD_NOT_ALLOWED",
  _406NOTACCEPTABLE = "406 NOT_ACCEPTABLE",
  _407PROXYAUTHENTICATIONREQUIRED = "407 PROXY_AUTHENTICATION_REQUIRED",
  _408REQUESTTIMEOUT = "408 REQUEST_TIMEOUT",
  _409CONFLICT = "409 CONFLICT",
  _410GONE = "410 GONE",
  _411LENGTHREQUIRED = "411 LENGTH_REQUIRED",
  _412PRECONDITIONFAILED = "412 PRECONDITION_FAILED",
  _413PAYLOADTOOLARGE = "413 PAYLOAD_TOO_LARGE",
  _413REQUESTENTITYTOOLARGE = "413 REQUEST_ENTITY_TOO_LARGE",
  _414URITOOLONG = "414 URI_TOO_LONG",
  _414REQUESTURITOOLONG = "414 REQUEST_URI_TOO_LONG",
  _415UNSUPPORTEDMEDIATYPE = "415 UNSUPPORTED_MEDIA_TYPE",
  _416REQUESTEDRANGENOTSATISFIABLE = "416 REQUESTED_RANGE_NOT_SATISFIABLE",
  _417EXPECTATIONFAILED = "417 EXPECTATION_FAILED",
  _418IAMATEAPOT = "418 I_AM_A_TEAPOT",
  _419INSUFFICIENTSPACEONRESOURCE = "419 INSUFFICIENT_SPACE_ON_RESOURCE",
  _420METHODFAILURE = "420 METHOD_FAILURE",
  _421DESTINATIONLOCKED = "421 DESTINATION_LOCKED",
  _422UNPROCESSABLEENTITY = "422 UNPROCESSABLE_ENTITY",
  _423LOCKED = "423 LOCKED",
  _424FAILEDDEPENDENCY = "424 FAILED_DEPENDENCY",
  _426UPGRADEREQUIRED = "426 UPGRADE_REQUIRED",
  _428PRECONDITIONREQUIRED = "428 PRECONDITION_REQUIRED",
  _429TOOMANYREQUESTS = "429 TOO_MANY_REQUESTS",
  _431REQUESTHEADERFIELDSTOOLARGE = "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
  _451UNAVAILABLEFORLEGALREASONS = "451 UNAVAILABLE_FOR_LEGAL_REASONS",
  _500INTERNALSERVERERROR = "500 INTERNAL_SERVER_ERROR",
  _501NOTIMPLEMENTED = "501 NOT_IMPLEMENTED",
  _502BADGATEWAY = "502 BAD_GATEWAY",
  _503SERVICEUNAVAILABLE = "503 SERVICE_UNAVAILABLE",
  _504GATEWAYTIMEOUT = "504 GATEWAY_TIMEOUT",
  _505HTTPVERSIONNOTSUPPORTED = "505 HTTP_VERSION_NOT_SUPPORTED",
  _506VARIANTALSONEGOTIATES = "506 VARIANT_ALSO_NEGOTIATES",
  _507INSUFFICIENTSTORAGE = "507 INSUFFICIENT_STORAGE",
  _508LOOPDETECTED = "508 LOOP_DETECTED",
  _509BANDWIDTHLIMITEXCEEDED = "509 BANDWIDTH_LIMIT_EXCEEDED",
  _510NOTEXTENDED = "510 NOT_EXTENDED",
  _511NETWORKAUTHENTICATIONREQUIRED = "511 NETWORK_AUTHENTICATION_REQUIRED"
}

/**
 *
 * @export
 * @interface BillingDetails
 */
export interface BillingDetails {
  /**
   *
   * @type {Address}
   * @memberof BillingDetails
   */
  address?: Address;
  /**
   *
   * @type {string}
   * @memberof BillingDetails
   */
  email?: string;
  /**
   *
   * @type {object}
   * @memberof BillingDetails
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof BillingDetails
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof BillingDetails
   */
  phone?: string;
}
/**
 *
 * @export
 * @interface BillingThresholds
 */
export interface BillingThresholds {
  /**
   *
   * @type {object}
   * @memberof BillingThresholds
   */
  lastResponse?: object;
  /**
   *
   * @type {number}
   * @memberof BillingThresholds
   */
  usageGte?: number;
}
/**
 *
 * @export
 * @interface Bitcoin
 */
export interface Bitcoin {
  /**
   *
   * @type {string}
   * @memberof Bitcoin
   */
  address?: string;
  /**
   *
   * @type {number}
   * @memberof Bitcoin
   */
  amount?: number;
  /**
   *
   * @type {number}
   * @memberof Bitcoin
   */
  amountCharged?: number;
  /**
   *
   * @type {number}
   * @memberof Bitcoin
   */
  amountReceived?: number;
  /**
   *
   * @type {number}
   * @memberof Bitcoin
   */
  amountReturned?: number;
  /**
   *
   * @type {object}
   * @memberof Bitcoin
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Bitcoin
   */
  refundAddress?: string;
}
/**
 *
 * @export
 * @interface BusinessProfile
 */
export interface BusinessProfile {
  /**
   *
   * @type {object}
   * @memberof BusinessProfile
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof BusinessProfile
   */
  mcc?: string;
  /**
   *
   * @type {string}
   * @memberof BusinessProfile
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof BusinessProfile
   */
  productDescription?: string;
  /**
   *
   * @type {Address}
   * @memberof BusinessProfile
   */
  supportAddress?: Address;
  /**
   *
   * @type {string}
   * @memberof BusinessProfile
   */
  supportEmail?: string;
  /**
   *
   * @type {string}
   * @memberof BusinessProfile
   */
  supportPhone?: string;
  /**
   *
   * @type {string}
   * @memberof BusinessProfile
   */
  supportUrl?: string;
  /**
   *
   * @type {string}
   * @memberof BusinessProfile
   */
  url?: string;
}
/**
 *
 * @export
 * @interface Capabilities
 */
export interface Capabilities {
  /**
   *
   * @type {string}
   * @memberof Capabilities
   */
  cardPayments?: string;
  /**
   *
   * @type {object}
   * @memberof Capabilities
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Capabilities
   */
  legacyPayments?: string;
  /**
   *
   * @type {string}
   * @memberof Capabilities
   */
  platformPayments?: string;
}
/**
 *
 * @export
 * @interface Card
 */
export interface Card {
  /**
   *
   * @type {string}
   * @memberof Card
   */
  brand?: string;
  /**
   *
   * @type {Checks}
   * @memberof Card
   */
  checks?: Checks;
  /**
   *
   * @type {string}
   * @memberof Card
   */
  country?: string;
  /**
   *
   * @type {string}
   * @memberof Card
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof Card
   */
  expMonth?: number;
  /**
   *
   * @type {number}
   * @memberof Card
   */
  expYear?: number;
  /**
   *
   * @type {string}
   * @memberof Card
   */
  fingerprint?: string;
  /**
   *
   * @type {string}
   * @memberof Card
   */
  funding?: string;
  /**
   *
   * @type {string}
   * @memberof Card
   */
  iin?: string;
  /**
   *
   * @type {string}
   * @memberof Card
   */
  issuer?: string;
  /**
   *
   * @type {string}
   * @memberof Card
   */
  last4?: string;
  /**
   *
   * @type {object}
   * @memberof Card
   */
  lastResponse?: object;
  /**
   *
   * @type {ThreeDSecure}
   * @memberof Card
   */
  threeDSecure?: ThreeDSecure;
  /**
   *
   * @type {Wallet}
   * @memberof Card
   */
  wallet?: Wallet;
}
/**
 *
 * @export
 * @interface CardCollection
 */
export interface CardCollection {
  /**
   *
   * @type {number}
   * @memberof CardCollection
   */
  count?: number;
  /**
   *
   * @type {Array<Card>}
   * @memberof CardCollection
   */
  data?: Card[];
  /**
   *
   * @type {boolean}
   * @memberof CardCollection
   */
  hasMore?: boolean;
  /**
   *
   * @type {object}
   * @memberof CardCollection
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof CardCollection
   */
  object?: string;
  /**
   *
   * @type {RequestOptions}
   * @memberof CardCollection
   */
  _requestOptions?: RequestOptions;
  /**
   *
   * @type {object}
   * @memberof CardCollection
   */
  requestParams?: object;
  /**
   *
   * @type {number}
   * @memberof CardCollection
   */
  totalCount?: number;
  /**
   *
   * @type {string}
   * @memberof CardCollection
   */
  url?: string;
}
/**
 *
 * @export
 * @interface CardPresent
 */
export interface CardPresent {
  /**
   *
   * @type {string}
   * @memberof CardPresent
   */
  brand?: string;
  /**
   *
   * @type {string}
   * @memberof CardPresent
   */
  country?: string;
  /**
   *
   * @type {string}
   * @memberof CardPresent
   */
  emvAuthData?: string;
  /**
   *
   * @type {number}
   * @memberof CardPresent
   */
  expMonth?: number;
  /**
   *
   * @type {number}
   * @memberof CardPresent
   */
  expYear?: number;
  /**
   *
   * @type {string}
   * @memberof CardPresent
   */
  fingerprint?: string;
  /**
   *
   * @type {string}
   * @memberof CardPresent
   */
  funding?: string;
  /**
   *
   * @type {string}
   * @memberof CardPresent
   */
  generatedCard?: string;
  /**
   *
   * @type {string}
   * @memberof CardPresent
   */
  last4?: string;
  /**
   *
   * @type {object}
   * @memberof CardPresent
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof CardPresent
   */
  readMethod?: string;
  /**
   *
   * @type {Receipt}
   * @memberof CardPresent
   */
  receipt?: Receipt;
}
/**
 *
 * @export
 * @interface Charge
 */
export interface Charge {
  /**
   *
   * @type {AlternateStatementDescriptors}
   * @memberof Charge
   */
  alternateStatementDescriptors?: AlternateStatementDescriptors;
  /**
   *
   * @type {number}
   * @memberof Charge
   */
  amount?: number;
  /**
   *
   * @type {number}
   * @memberof Charge
   */
  amountRefunded?: number;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  application?: string;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  applicationFee?: string;
  /**
   *
   * @type {number}
   * @memberof Charge
   */
  applicationFeeAmount?: number;
  /**
   *
   * @type {ApplicationFee}
   * @memberof Charge
   */
  applicationFeeObject?: ApplicationFee;
  /**
   *
   * @type {Application}
   * @memberof Charge
   */
  applicationObject?: Application;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  authorizationCode?: string;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  balanceTransaction?: string;
  /**
   *
   * @type {BalanceTransaction}
   * @memberof Charge
   */
  balanceTransactionObject?: BalanceTransaction;
  /**
   *
   * @type {BillingDetails}
   * @memberof Charge
   */
  billingDetails?: BillingDetails;
  /**
   *
   * @type {boolean}
   * @memberof Charge
   */
  captured?: boolean;
  /**
   *
   * @type {number}
   * @memberof Charge
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  customer?: string;
  /**
   *
   * @type {Customer}
   * @memberof Charge
   */
  customerObject?: Customer;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  destination?: string;
  /**
   *
   * @type {Account}
   * @memberof Charge
   */
  destinationObject?: Account;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  dispute?: string;
  /**
   *
   * @type {Dispute}
   * @memberof Charge
   */
  disputeObject?: Dispute;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  failureCode?: string;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  failureMessage?: string;
  /**
   *
   * @type {FraudDetails}
   * @memberof Charge
   */
  fraudDetails?: FraudDetails;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  invoice?: string;
  /**
   *
   * @type {Invoice}
   * @memberof Charge
   */
  invoiceObject?: Invoice;
  /**
   *
   * @type {object}
   * @memberof Charge
   */
  lastResponse?: object;
  /**
   *
   * @type {Level3}
   * @memberof Charge
   */
  level3?: Level3;
  /**
   *
   * @type {boolean}
   * @memberof Charge
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Charge
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  onBehalfOf?: string;
  /**
   *
   * @type {Account}
   * @memberof Charge
   */
  onBehalfOfObject?: Account;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  order?: string;
  /**
   *
   * @type {Order}
   * @memberof Charge
   */
  orderObject?: Order;
  /**
   *
   * @type {Outcome}
   * @memberof Charge
   */
  outcome?: Outcome;
  /**
   *
   * @type {boolean}
   * @memberof Charge
   */
  paid?: boolean;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  paymentIntent?: string;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  paymentMethod?: string;
  /**
   *
   * @type {PaymentMethodDetails}
   * @memberof Charge
   */
  paymentMethodDetails?: PaymentMethodDetails;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  receiptEmail?: string;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  receiptNumber?: string;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  receiptUrl?: string;
  /**
   *
   * @type {boolean}
   * @memberof Charge
   */
  refunded?: boolean;
  /**
   *
   * @type {RefundCollection}
   * @memberof Charge
   */
  refunds?: RefundCollection;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  review?: string;
  /**
   *
   * @type {Review}
   * @memberof Charge
   */
  reviewObject?: Review;
  /**
   *
   * @type {ShippingDetails}
   * @memberof Charge
   */
  shipping?: ShippingDetails;
  /**
   *
   * @type {PaymentSource}
   * @memberof Charge
   */
  source?: PaymentSource;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  sourceTransfer?: string;
  /**
   *
   * @type {Transfer}
   * @memberof Charge
   */
  sourceTransferObject?: Transfer;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  statementDescriptor?: string;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  status?: string;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  transfer?: string;
  /**
   *
   * @type {TransferData}
   * @memberof Charge
   */
  transferData?: TransferData;
  /**
   *
   * @type {string}
   * @memberof Charge
   */
  transferGroup?: string;
  /**
   *
   * @type {Transfer}
   * @memberof Charge
   */
  transferObject?: Transfer;
}
/**
 *
 * @export
 * @interface ChargeCollection
 */
export interface ChargeCollection {
  /**
   *
   * @type {number}
   * @memberof ChargeCollection
   */
  count?: number;
  /**
   *
   * @type {Array<Charge>}
   * @memberof ChargeCollection
   */
  data?: Charge[];
  /**
   *
   * @type {boolean}
   * @memberof ChargeCollection
   */
  hasMore?: boolean;
  /**
   *
   * @type {object}
   * @memberof ChargeCollection
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof ChargeCollection
   */
  object?: string;
  /**
   *
   * @type {RequestOptions}
   * @memberof ChargeCollection
   */
  _requestOptions?: RequestOptions;
  /**
   *
   * @type {object}
   * @memberof ChargeCollection
   */
  requestParams?: object;
  /**
   *
   * @type {number}
   * @memberof ChargeCollection
   */
  totalCount?: number;
  /**
   *
   * @type {string}
   * @memberof ChargeCollection
   */
  url?: string;
}
/**
 *
 * @export
 * @interface ChargeRequestModel
 */
export interface ChargeRequestModel {
  /**
   *
   * @type {number}
   * @memberof ChargeRequestModel
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof ChargeRequestModel
   */
  currency?: string;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof ChargeRequestModel
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof ChargeRequestModel
   */
  source?: string;
}
/**
 *
 * @export
 * @interface Checks
 */
export interface Checks {
  /**
   *
   * @type {string}
   * @memberof Checks
   */
  addressLine1Check?: string;
  /**
   *
   * @type {string}
   * @memberof Checks
   */
  addressPostalCodeCheck?: string;
  /**
   *
   * @type {string}
   * @memberof Checks
   */
  cvcCheck?: string;
  /**
   *
   * @type {object}
   * @memberof Checks
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface Company
 */
export interface Company {
  /**
   *
   * @type {Address}
   * @memberof Company
   */
  address?: Address;
  /**
   *
   * @type {JapanAddress}
   * @memberof Company
   */
  addressKana?: JapanAddress;
  /**
   *
   * @type {JapanAddress}
   * @memberof Company
   */
  addressKanji?: JapanAddress;
  /**
   *
   * @type {boolean}
   * @memberof Company
   */
  directorsProvided?: boolean;
  /**
   *
   * @type {object}
   * @memberof Company
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  nameKana?: string;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  nameKanji?: string;
  /**
   *
   * @type {boolean}
   * @memberof Company
   */
  ownersProvided?: boolean;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  phone?: string;
  /**
   *
   * @type {boolean}
   * @memberof Company
   */
  taxIdProvided?: boolean;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  taxIdRegistrar?: string;
  /**
   *
   * @type {boolean}
   * @memberof Company
   */
  vatIdProvided?: boolean;
}
/**
 *
 * @export
 * @interface Coupon
 */
export interface Coupon {
  /**
   *
   * @type {number}
   * @memberof Coupon
   */
  amountOff?: number;
  /**
   *
   * @type {number}
   * @memberof Coupon
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof Coupon
   */
  currency?: string;
  /**
   *
   * @type {boolean}
   * @memberof Coupon
   */
  deleted?: boolean;
  /**
   *
   * @type {string}
   * @memberof Coupon
   */
  duration?: string;
  /**
   *
   * @type {number}
   * @memberof Coupon
   */
  durationInMonths?: number;
  /**
   *
   * @type {string}
   * @memberof Coupon
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof Coupon
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof Coupon
   */
  livemode?: boolean;
  /**
   *
   * @type {number}
   * @memberof Coupon
   */
  maxRedemptions?: number;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Coupon
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Coupon
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Coupon
   */
  object?: string;
  /**
   *
   * @type {number}
   * @memberof Coupon
   */
  percentOff?: number;
  /**
   *
   * @type {number}
   * @memberof Coupon
   */
  redeemBy?: number;
  /**
   *
   * @type {number}
   * @memberof Coupon
   */
  timesRedeemed?: number;
  /**
   *
   * @type {boolean}
   * @memberof Coupon
   */
  valid?: boolean;
}
/**
 *
 * @export
 * @interface CustomField
 */
export interface CustomField {
  /**
   *
   * @type {object}
   * @memberof CustomField
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof CustomField
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CustomField
   */
  value?: string;
}
/**
 *
 * @export
 * @interface Customer
 */
export interface Customer {
  /**
   *
   * @type {number}
   * @memberof Customer
   */
  accountBalance?: number;
  /**
   *
   * @type {Address}
   * @memberof Customer
   */
  address?: Address;
  /**
   *
   * @type {number}
   * @memberof Customer
   */
  balance?: number;
  /**
   *
   * @type {number}
   * @memberof Customer
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  defaultSource?: string;
  /**
   *
   * @type {PaymentSource}
   * @memberof Customer
   */
  defaultSourceObject?: PaymentSource;
  /**
   *
   * @type {boolean}
   * @memberof Customer
   */
  deleted?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Customer
   */
  delinquent?: boolean;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  description?: string;
  /**
   *
   * @type {Discount}
   * @memberof Customer
   */
  discount?: Discount;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  invoicePrefix?: string;
  /**
   *
   * @type {InvoiceSettings}
   * @memberof Customer
   */
  invoiceSettings?: InvoiceSettings;
  /**
   *
   * @type {object}
   * @memberof Customer
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof Customer
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Customer
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  phone?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Customer
   */
  preferredLocales?: string[];
  /**
   *
   * @type {ShippingDetails}
   * @memberof Customer
   */
  shipping?: ShippingDetails;
  /**
   *
   * @type {PaymentSourceCollection}
   * @memberof Customer
   */
  sources?: PaymentSourceCollection;
  /**
   *
   * @type {SubscriptionCollection}
   * @memberof Customer
   */
  subscriptions?: SubscriptionCollection;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  taxExempt?: string;
  /**
   *
   * @type {TaxIdCollection}
   * @memberof Customer
   */
  taxIds?: TaxIdCollection;
  /**
   *
   * @type {TaxInfo}
   * @memberof Customer
   */
  taxInfo?: TaxInfo;
  /**
   *
   * @type {TaxInfoVerification}
   * @memberof Customer
   */
  taxInfoVerification?: TaxInfoVerification;
}
/**
 *
 * @export
 * @interface CustomerTaxId
 */
export interface CustomerTaxId {
  /**
   *
   * @type {object}
   * @memberof CustomerTaxId
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof CustomerTaxId
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof CustomerTaxId
   */
  value?: string;
}
/**
 *
 * @export
 * @interface DateOfBirth
 */
export interface DateOfBirth {
  /**
   *
   * @type {number}
   * @memberof DateOfBirth
   */
  day?: number;
  /**
   *
   * @type {object}
   * @memberof DateOfBirth
   */
  lastResponse?: object;
  /**
   *
   * @type {number}
   * @memberof DateOfBirth
   */
  month?: number;
  /**
   *
   * @type {number}
   * @memberof DateOfBirth
   */
  year?: number;
}
/**
 *
 * @export
 * @interface DeclineChargeOn
 */
export interface DeclineChargeOn {
  /**
   *
   * @type {boolean}
   * @memberof DeclineChargeOn
   */
  avsFailure?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof DeclineChargeOn
   */
  cvcFailure?: boolean;
  /**
   *
   * @type {object}
   * @memberof DeclineChargeOn
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface DeliveryEstimate
 */
export interface DeliveryEstimate {
  /**
   *
   * @type {string}
   * @memberof DeliveryEstimate
   */
  date?: string;
  /**
   *
   * @type {string}
   * @memberof DeliveryEstimate
   */
  earliest?: string;
  /**
   *
   * @type {object}
   * @memberof DeliveryEstimate
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof DeliveryEstimate
   */
  latest?: string;
  /**
   *
   * @type {string}
   * @memberof DeliveryEstimate
   */
  type?: string;
}
/**
 *
 * @export
 * @interface Discount
 */
export interface Discount {
  /**
   *
   * @type {Coupon}
   * @memberof Discount
   */
  coupon?: Coupon;
  /**
   *
   * @type {string}
   * @memberof Discount
   */
  customer?: string;
  /**
   *
   * @type {Customer}
   * @memberof Discount
   */
  customerObject?: Customer;
  /**
   *
   * @type {boolean}
   * @memberof Discount
   */
  deleted?: boolean;
  /**
   *
   * @type {number}
   * @memberof Discount
   */
  end?: number;
  /**
   *
   * @type {object}
   * @memberof Discount
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Discount
   */
  object?: string;
  /**
   *
   * @type {number}
   * @memberof Discount
   */
  start?: number;
  /**
   *
   * @type {string}
   * @memberof Discount
   */
  subscription?: string;
}
/**
 *
 * @export
 * @interface Dispute
 */
export interface Dispute {
  /**
   *
   * @type {number}
   * @memberof Dispute
   */
  amount?: number;
  /**
   *
   * @type {Array<BalanceTransaction>}
   * @memberof Dispute
   */
  balanceTransactions?: BalanceTransaction[];
  /**
   *
   * @type {string}
   * @memberof Dispute
   */
  charge?: string;
  /**
   *
   * @type {Charge}
   * @memberof Dispute
   */
  chargeObject?: Charge;
  /**
   *
   * @type {number}
   * @memberof Dispute
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof Dispute
   */
  currency?: string;
  /**
   *
   * @type {Evidence}
   * @memberof Dispute
   */
  evidence?: Evidence;
  /**
   *
   * @type {EvidenceDetails}
   * @memberof Dispute
   */
  evidenceDetails?: EvidenceDetails;
  /**
   *
   * @type {string}
   * @memberof Dispute
   */
  id?: string;
  /**
   *
   * @type {boolean}
   * @memberof Dispute
   */
  isChargeRefundable?: boolean;
  /**
   *
   * @type {object}
   * @memberof Dispute
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof Dispute
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Dispute
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Dispute
   */
  networkReasonCode?: string;
  /**
   *
   * @type {string}
   * @memberof Dispute
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof Dispute
   */
  reason?: string;
  /**
   *
   * @type {string}
   * @memberof Dispute
   */
  status?: string;
}
/**
 *
 * @export
 * @interface Eps
 */
export interface Eps {
  /**
   *
   * @type {object}
   * @memberof Eps
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Eps
   */
  verifiedName?: string;
}
/**
 *
 * @export
 * @interface ErrorModel
 */
export interface ErrorModel {
  /**
   *
   * @type {Array<FieldError>}
   * @memberof ErrorModel
   */
  fieldErrors?: FieldError[];
  /**
   *
   * @type {Array<GlobalError>}
   * @memberof ErrorModel
   */
  globalErrors?: GlobalError[];
}
/**
 *
 * @export
 * @interface EventDetailModel
 */
export interface EventDetailModel {
  /**
   *
   * @type {string}
   * @memberof EventDetailModel
   */
  address?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof EventDetailModel
   */
  ambience?: string[];
  /**
   *
   * @type {string}
   * @memberof EventDetailModel
   */
  city?: string;
  /**
   *
   * @type {string}
   * @memberof EventDetailModel
   */
  eventDescription?: string;
  /**
   *
   * @type {string}
   * @memberof EventDetailModel
   */
  eventEndTime?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof EventDetailModel
   */
  eventId?: string;
  /**
   *
   * @type {string}
   * @memberof EventDetailModel
   */
  eventName?: string;
  /**
   *
   * @type {string}
   * @memberof EventDetailModel
   */
  eventStartTime?: string;
  /**
   * READ ONLY
   * @type {boolean}
   * @memberof EventDetailModel
   */
  favorite?: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof EventDetailModel
   */
  images?: string[];
  /**
   *
   * @type {string}
   * @memberof EventDetailModel
   */
  latitude?: string;
  /**
   *
   * @type {string}
   * @memberof EventDetailModel
   */
  longitude?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof EventDetailModel
   */
  music?: string[];
  /**
   * READ ONLY
   * @type {boolean}
   * @memberof EventDetailModel
   */
  open?: boolean;
  /**
   * READ ONLY
   * @type {string}
   * @memberof EventDetailModel
   */
  ownerUserProfileId?: string;
  /**
   *
   * @type {Array<EventPackageModel>}
   * @memberof EventDetailModel
   */
  packages?: EventPackageModel[];
  /**
   *
   * @type {string}
   * @memberof EventDetailModel
   */
  primaryImageUrl?: string;
  /**
   *
   * @type {boolean}
   * @memberof EventDetailModel
   */
  privateEvent?: boolean;
  /**
   * READ ONLY
   * @type {number}
   * @memberof EventDetailModel
   */
  rating?: number;
  /**
   *
   * @type {string}
   * @memberof EventDetailModel
   */
  secondaryOwnerUserProfileId?: string;
  /**
   *
   * @type {string}
   * @memberof EventDetailModel
   */
  state?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof EventDetailModel
   */
  tags?: string[];
  /**
   *
   * @type {string}
   * @memberof EventDetailModel
   */
  tertiaryOwnerUserProfileId?: string;
  /**
   *
   * @type {string}
   * @memberof EventDetailModel
   */
  venueId?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof EventDetailModel
   */
  venueName?: string;
  /**
   *
   * @type {string}
   * @memberof EventDetailModel
   */
  zipCode?: string;

  recurrence?: string[];

  category?: string;
}
/**
 *
 * @export
 * @interface EventModel
 */
export interface EventModel {
  /**
   *
   * @type {string}
   * @memberof EventModel
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof EventModel
   */
  city?: string;
  /**
   *
   * @type {string}
   * @memberof EventModel
   */
  eventDescription?: string;
  /**
   *
   * @type {string}
   * @memberof EventModel
   */
  eventEndTime?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof EventModel
   */
  eventId?: string;
  /**
   *
   * @type {string}
   * @memberof EventModel
   */
  eventName?: string;
  /**
   *
   * @type {string}
   * @memberof EventModel
   */
  eventStartTime?: string;
  /**
   * READ ONLY
   * @type {boolean}
   * @memberof EventModel
   */
  favorite?: boolean;
  /**
   *
   * @type {string}
   * @memberof EventModel
   */
  latitude?: string;
  /**
   *
   * @type {string}
   * @memberof EventModel
   */
  longitude?: string;
  /**
   * READ ONLY
   * @type {boolean}
   * @memberof EventModel
   */
  open?: boolean;
  /**
   * READ ONLY
   * @type {string}
   * @memberof EventModel
   */
  ownerUserProfileId?: string;
  /**
   *
   * @type {string}
   * @memberof EventModel
   */
  primaryImageUrl?: string;
  /**
   *
   * @type {boolean}
   * @memberof EventModel
   */
  privateEvent?: boolean;
  /**
   * READ ONLY
   * @type {number}
   * @memberof EventModel
   */
  rating?: number;
  /**
   *
   * @type {string}
   * @memberof EventModel
   */
  secondaryOwnerUserProfileId?: string;
  /**
   *
   * @type {string}
   * @memberof EventModel
   */
  state?: string;
  /**
   *
   * @type {string}
   * @memberof EventModel
   */
  tertiaryOwnerUserProfileId?: string;
  /**
   *
   * @type {string}
   * @memberof EventModel
   */
  venueId?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof EventModel
   */
  venueName?: string;
  /**
   *
   * @type {string}
   * @memberof EventModel
   */
  zipCode?: string;
}
/**
 *
 * @export
 * @interface EventPackageModel
 */
export interface EventPackageModel {
  /**
   *
   * @type {string}
   * @memberof EventPackageModel
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof EventPackageModel
   */
  packageName?: string;
  /**
   *
   * @type {string}
   * @memberof EventPackageModel
   */
  packageType?: PackageType;
  /**
   *
   * @type {number}
   * @memberof EventPackageModel
   */
  price?: number;

  quantity?: number;
}
/**
 *
 * @export
 * @interface Evidence
 */
export interface Evidence {
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  accessActivityLog?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  billingAddress?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  cancellationPolicy?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  cancellationPolicyDisclosure?: string;
  /**
   *
   * @type {any}
   * @memberof Evidence
   */
  cancellationPolicyObject?: any;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  cancellationRebuttal?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  customerCommunication?: string;
  /**
   *
   * @type {any}
   * @memberof Evidence
   */
  customerCommunicationObject?: any;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  customerEmailAddress?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  customerName?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  customerPurchaseIp?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  customerSignature?: string;
  /**
   *
   * @type {any}
   * @memberof Evidence
   */
  customerSignatureObject?: any;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  duplicateChargeDocumentation?: string;
  /**
   *
   * @type {any}
   * @memberof Evidence
   */
  duplicateChargeDocumentationObject?: any;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  duplicateChargeExplanation?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  duplicateChargeId?: string;
  /**
   *
   * @type {object}
   * @memberof Evidence
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  productDescription?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  receipt?: string;
  /**
   *
   * @type {any}
   * @memberof Evidence
   */
  receiptObject?: any;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  refundPolicy?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  refundPolicyDisclosure?: string;
  /**
   *
   * @type {any}
   * @memberof Evidence
   */
  refundPolicyObject?: any;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  refundRefusalExplanation?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  serviceDate?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  serviceDocumentation?: string;
  /**
   *
   * @type {any}
   * @memberof Evidence
   */
  serviceDocumentationObject?: any;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  shippingAddress?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  shippingCarrier?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  shippingDate?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  shippingDocumentation?: string;
  /**
   *
   * @type {any}
   * @memberof Evidence
   */
  shippingDocumentationObject?: any;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  shippingTrackingNumber?: string;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  uncategorizedFile?: string;
  /**
   *
   * @type {any}
   * @memberof Evidence
   */
  uncategorizedFileObject?: any;
  /**
   *
   * @type {string}
   * @memberof Evidence
   */
  uncategorizedText?: string;
}
/**
 *
 * @export
 * @interface EvidenceDetails
 */
export interface EvidenceDetails {
  /**
   *
   * @type {number}
   * @memberof EvidenceDetails
   */
  dueBy?: number;
  /**
   *
   * @type {boolean}
   * @memberof EvidenceDetails
   */
  hasEvidence?: boolean;
  /**
   *
   * @type {object}
   * @memberof EvidenceDetails
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof EvidenceDetails
   */
  pastDue?: boolean;
  /**
   *
   * @type {number}
   * @memberof EvidenceDetails
   */
  submissionCount?: number;
}
/**
 *
 * @export
 * @interface ExternalAccount
 */
export interface ExternalAccount {
  /**
   *
   * @type {string}
   * @memberof ExternalAccount
   */
  id?: string;
}
/**
 *
 * @export
 * @interface ExternalAccountCollection
 */
export interface ExternalAccountCollection {
  /**
   *
   * @type {number}
   * @memberof ExternalAccountCollection
   */
  count?: number;
  /**
   *
   * @type {Array<ExternalAccount>}
   * @memberof ExternalAccountCollection
   */
  data?: ExternalAccount[];
  /**
   *
   * @type {boolean}
   * @memberof ExternalAccountCollection
   */
  hasMore?: boolean;
  /**
   *
   * @type {object}
   * @memberof ExternalAccountCollection
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof ExternalAccountCollection
   */
  object?: string;
  /**
   *
   * @type {RequestOptions}
   * @memberof ExternalAccountCollection
   */
  _requestOptions?: RequestOptions;
  /**
   *
   * @type {object}
   * @memberof ExternalAccountCollection
   */
  requestParams?: object;
  /**
   *
   * @type {number}
   * @memberof ExternalAccountCollection
   */
  totalCount?: number;
  /**
   *
   * @type {string}
   * @memberof ExternalAccountCollection
   */
  url?: string;
}
/**
 *
 * @export
 * @interface Fee
 */
export interface Fee {
  /**
   *
   * @type {number}
   * @memberof Fee
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof Fee
   */
  application?: string;
  /**
   *
   * @type {string}
   * @memberof Fee
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof Fee
   */
  description?: string;
  /**
   *
   * @type {object}
   * @memberof Fee
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Fee
   */
  type?: string;
}
/**
 *
 * @export
 * @interface FeeRefund
 */
export interface FeeRefund {
  /**
   *
   * @type {number}
   * @memberof FeeRefund
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof FeeRefund
   */
  balanceTransaction?: string;
  /**
   *
   * @type {BalanceTransaction}
   * @memberof FeeRefund
   */
  balanceTransactionObject?: BalanceTransaction;
  /**
   *
   * @type {number}
   * @memberof FeeRefund
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof FeeRefund
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof FeeRefund
   */
  fee?: string;
  /**
   *
   * @type {ApplicationFee}
   * @memberof FeeRefund
   */
  feeObject?: ApplicationFee;
  /**
   *
   * @type {string}
   * @memberof FeeRefund
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof FeeRefund
   */
  lastResponse?: object;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof FeeRefund
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof FeeRefund
   */
  object?: string;
}
/**
 *
 * @export
 * @interface FeeRefundCollection
 */
export interface FeeRefundCollection {
  /**
   *
   * @type {number}
   * @memberof FeeRefundCollection
   */
  count?: number;
  /**
   *
   * @type {Array<FeeRefund>}
   * @memberof FeeRefundCollection
   */
  data?: FeeRefund[];
  /**
   *
   * @type {boolean}
   * @memberof FeeRefundCollection
   */
  hasMore?: boolean;
  /**
   *
   * @type {object}
   * @memberof FeeRefundCollection
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof FeeRefundCollection
   */
  object?: string;
  /**
   *
   * @type {RequestOptions}
   * @memberof FeeRefundCollection
   */
  _requestOptions?: RequestOptions;
  /**
   *
   * @type {object}
   * @memberof FeeRefundCollection
   */
  requestParams?: object;
  /**
   *
   * @type {number}
   * @memberof FeeRefundCollection
   */
  totalCount?: number;
  /**
   *
   * @type {string}
   * @memberof FeeRefundCollection
   */
  url?: string;
}
/**
 *
 * @export
 * @interface FieldError
 */
export interface FieldError {
  /**
   *
   * @type {string}
   * @memberof FieldError
   */
  code?: string;
  /**
   *
   * @type {string}
   * @memberof FieldError
   */
  field?: string;
  /**
   *
   * @type {object}
   * @memberof FieldError
   */
  rejectedValue?: object;
}
/**
 *
 * @export
 * @interface FileLink
 */
export interface FileLink {
  /**
   *
   * @type {number}
   * @memberof FileLink
   */
  created?: number;
  /**
   *
   * @type {boolean}
   * @memberof FileLink
   */
  expired?: boolean;
  /**
   *
   * @type {number}
   * @memberof FileLink
   */
  expiresAt?: number;
  /**
   *
   * @type {string}
   * @memberof FileLink
   */
  file?: string;
  /**
   *
   * @type {any}
   * @memberof FileLink
   */
  fileObject?: any;
  /**
   *
   * @type {string}
   * @memberof FileLink
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof FileLink
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof FileLink
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof FileLink
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof FileLink
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof FileLink
   */
  url?: string;
}
/**
 *
 * @export
 * @interface FileLinkCollection
 */
export interface FileLinkCollection {
  /**
   *
   * @type {number}
   * @memberof FileLinkCollection
   */
  count?: number;
  /**
   *
   * @type {Array<FileLink>}
   * @memberof FileLinkCollection
   */
  data?: FileLink[];
  /**
   *
   * @type {boolean}
   * @memberof FileLinkCollection
   */
  hasMore?: boolean;
  /**
   *
   * @type {object}
   * @memberof FileLinkCollection
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof FileLinkCollection
   */
  object?: string;
  /**
   *
   * @type {RequestOptions}
   * @memberof FileLinkCollection
   */
  _requestOptions?: RequestOptions;
  /**
   *
   * @type {object}
   * @memberof FileLinkCollection
   */
  requestParams?: object;
  /**
   *
   * @type {number}
   * @memberof FileLinkCollection
   */
  totalCount?: number;
  /**
   *
   * @type {string}
   * @memberof FileLinkCollection
   */
  url?: string;
}
/**
 *
 * @export
 * @interface FraudDetails
 */
export interface FraudDetails {
  /**
   *
   * @type {object}
   * @memberof FraudDetails
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof FraudDetails
   */
  stripeReport?: string;
  /**
   *
   * @type {string}
   * @memberof FraudDetails
   */
  userReport?: string;
}
/**
 *
 * @export
 * @interface FullUserProfileModel
 */
export interface FullUserProfileModel {
  /**
   *
   * @type {string}
   * @memberof FullUserProfileModel
   */
  bio?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof FullUserProfileModel
   */
  firstName?: string;
  /**
   * READ ONLY
   * @type {number}
   * @memberof FullUserProfileModel
   */
  followerCount?: number;
  /**
   * READ ONLY
   * @type {number}
   * @memberof FullUserProfileModel
   */
  followingCount?: number;
  /**
   * READ ONLY
   * @type {string}
   * @memberof FullUserProfileModel
   */
  gender?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof FullUserProfileModel
   */
  lastName?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof FullUserProfileModel
   */
  phoneNumber?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof FullUserProfileModel
   */
  profileImageUrl?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof FullUserProfileModel
   */
  userProfileId?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof FullUserProfileModel
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof FullUserProfileModel
   */
  websiteUrl?: string;
}
/**
 *
 * @export
 * @interface Giropay
 */
export interface Giropay {
  /**
   *
   * @type {string}
   * @memberof Giropay
   */
  bankCode?: string;
  /**
   *
   * @type {string}
   * @memberof Giropay
   */
  bankName?: string;
  /**
   *
   * @type {string}
   * @memberof Giropay
   */
  bic?: string;
  /**
   *
   * @type {object}
   * @memberof Giropay
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Giropay
   */
  verifiedName?: string;
}
/**
 *
 * @export
 * @interface GlobalError
 */
export interface GlobalError {
  /**
   *
   * @type {string}
   * @memberof GlobalError
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GooglePay
 */
export interface GooglePay {
  /**
   *
   * @type {object}
   * @memberof GooglePay
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface Ideal
 */
export interface Ideal {
  /**
   *
   * @type {string}
   * @memberof Ideal
   */
  bank?: string;
  /**
   *
   * @type {string}
   * @memberof Ideal
   */
  bic?: string;
  /**
   *
   * @type {string}
   * @memberof Ideal
   */
  ibanLast4?: string;
  /**
   *
   * @type {object}
   * @memberof Ideal
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Ideal
   */
  verifiedName?: string;
}
/**
 *
 * @export
 * @interface Inventory
 */
export interface Inventory {
  /**
   *
   * @type {object}
   * @memberof Inventory
   */
  lastResponse?: object;
  /**
   *
   * @type {number}
   * @memberof Inventory
   */
  quantity?: number;
  /**
   *
   * @type {string}
   * @memberof Inventory
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof Inventory
   */
  value?: string;
}
/**
 *
 * @export
 * @interface Invoice
 */
export interface Invoice {
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  accountCountry?: string;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  accountName?: string;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  amountDue?: number;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  amountPaid?: number;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  amountRemaining?: number;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  applicationFeeAmount?: number;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  attemptCount?: number;
  /**
   *
   * @type {boolean}
   * @memberof Invoice
   */
  attempted?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Invoice
   */
  autoAdvance?: boolean;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  billing?: string;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  billingReason?: string;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  charge?: string;
  /**
   *
   * @type {Charge}
   * @memberof Invoice
   */
  chargeObject?: Charge;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  currency?: string;
  /**
   *
   * @type {Array<CustomField>}
   * @memberof Invoice
   */
  customFields?: CustomField[];
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  customer?: string;
  /**
   *
   * @type {Address}
   * @memberof Invoice
   */
  customerAddress?: Address;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  customerEmail?: string;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  customerName?: string;
  /**
   *
   * @type {Customer}
   * @memberof Invoice
   */
  customerObject?: Customer;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  customerPhone?: string;
  /**
   *
   * @type {ShippingDetails}
   * @memberof Invoice
   */
  customerShipping?: ShippingDetails;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  customerTaxExempt?: string;
  /**
   *
   * @type {Array<CustomerTaxId>}
   * @memberof Invoice
   */
  customerTaxIds?: CustomerTaxId[];
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  defaultPaymentMethod?: string;
  /**
   *
   * @type {PaymentMethod}
   * @memberof Invoice
   */
  defaultPaymentMethodObject?: PaymentMethod;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  defaultSource?: string;
  /**
   *
   * @type {PaymentSource}
   * @memberof Invoice
   */
  defaultSourceObject?: PaymentSource;
  /**
   *
   * @type {Array<TaxRate>}
   * @memberof Invoice
   */
  defaultTaxRates?: TaxRate[];
  /**
   *
   * @type {boolean}
   * @memberof Invoice
   */
  deleted?: boolean;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  description?: string;
  /**
   *
   * @type {Discount}
   * @memberof Invoice
   */
  discount?: Discount;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  dueDate?: number;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  endingBalance?: number;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  footer?: string;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  hostedInvoiceUrl?: string;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  invoicePdf?: string;
  /**
   *
   * @type {object}
   * @memberof Invoice
   */
  lastResponse?: object;
  /**
   *
   * @type {InvoiceLineItemCollection}
   * @memberof Invoice
   */
  lines?: InvoiceLineItemCollection;
  /**
   *
   * @type {boolean}
   * @memberof Invoice
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Invoice
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  nextPaymentAttempt?: number;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  number?: string;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  object?: string;
  /**
   *
   * @type {boolean}
   * @memberof Invoice
   */
  paid?: boolean;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  paymentIntent?: string;
  /**
   *
   * @type {PaymentIntent}
   * @memberof Invoice
   */
  paymentIntentObject?: PaymentIntent;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  periodEnd?: number;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  periodStart?: number;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  postPaymentCreditNotesAmount?: number;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  prePaymentCreditNotesAmount?: number;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  receiptNumber?: string;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  startingBalance?: number;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  statementDescriptor?: string;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  status?: string;
  /**
   *
   * @type {StatusTransitions}
   * @memberof Invoice
   */
  statusTransitions?: StatusTransitions;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  subscription?: string;
  /**
   *
   * @type {Subscription}
   * @memberof Invoice
   */
  subscriptionObject?: Subscription;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  subscriptionProrationDate?: number;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  subtotal?: number;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  tax?: number;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  taxPercent?: number;
  /**
   *
   * @type {ThresholdReason}
   * @memberof Invoice
   */
  thresholdReason?: ThresholdReason;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  total?: number;
  /**
   *
   * @type {Array<TaxAmount>}
   * @memberof Invoice
   */
  totalTaxAmounts?: TaxAmount[];
  /**
   *
   * @type {TransferData}
   * @memberof Invoice
   */
  transferData?: TransferData;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  webhooksDeliveredAt?: number;
}
/**
 *
 * @export
 * @interface InvoiceLineItem
 */
export interface InvoiceLineItem {
  /**
   *
   * @type {number}
   * @memberof InvoiceLineItem
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof InvoiceLineItem
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof InvoiceLineItem
   */
  description?: string;
  /**
   *
   * @type {boolean}
   * @memberof InvoiceLineItem
   */
  discountable?: boolean;
  /**
   *
   * @type {string}
   * @memberof InvoiceLineItem
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof InvoiceLineItem
   */
  invoiceItem?: string;
  /**
   *
   * @type {object}
   * @memberof InvoiceLineItem
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof InvoiceLineItem
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof InvoiceLineItem
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof InvoiceLineItem
   */
  object?: string;
  /**
   *
   * @type {InvoiceLineItemPeriod}
   * @memberof InvoiceLineItem
   */
  period?: InvoiceLineItemPeriod;
  /**
   *
   * @type {Plan}
   * @memberof InvoiceLineItem
   */
  plan?: Plan;
  /**
   *
   * @type {boolean}
   * @memberof InvoiceLineItem
   */
  proration?: boolean;
  /**
   *
   * @type {number}
   * @memberof InvoiceLineItem
   */
  quantity?: number;
  /**
   *
   * @type {string}
   * @memberof InvoiceLineItem
   */
  subscription?: string;
  /**
   *
   * @type {string}
   * @memberof InvoiceLineItem
   */
  subscriptionItem?: string;
  /**
   *
   * @type {Array<TaxAmount>}
   * @memberof InvoiceLineItem
   */
  taxAmounts?: TaxAmount[];
  /**
   *
   * @type {Array<TaxRate>}
   * @memberof InvoiceLineItem
   */
  taxRates?: TaxRate[];
  /**
   *
   * @type {string}
   * @memberof InvoiceLineItem
   */
  type?: string;
}
/**
 *
 * @export
 * @interface InvoiceLineItemCollection
 */
export interface InvoiceLineItemCollection {
  /**
   *
   * @type {number}
   * @memberof InvoiceLineItemCollection
   */
  count?: number;
  /**
   *
   * @type {Array<InvoiceLineItem>}
   * @memberof InvoiceLineItemCollection
   */
  data?: InvoiceLineItem[];
  /**
   *
   * @type {boolean}
   * @memberof InvoiceLineItemCollection
   */
  hasMore?: boolean;
  /**
   *
   * @type {object}
   * @memberof InvoiceLineItemCollection
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof InvoiceLineItemCollection
   */
  object?: string;
  /**
   *
   * @type {RequestOptions}
   * @memberof InvoiceLineItemCollection
   */
  _requestOptions?: RequestOptions;
  /**
   *
   * @type {object}
   * @memberof InvoiceLineItemCollection
   */
  requestParams?: object;
  /**
   *
   * @type {number}
   * @memberof InvoiceLineItemCollection
   */
  totalCount?: number;
  /**
   *
   * @type {string}
   * @memberof InvoiceLineItemCollection
   */
  url?: string;
}
/**
 *
 * @export
 * @interface InvoiceLineItemPeriod
 */
export interface InvoiceLineItemPeriod {
  /**
   *
   * @type {number}
   * @memberof InvoiceLineItemPeriod
   */
  end?: number;
  /**
   *
   * @type {object}
   * @memberof InvoiceLineItemPeriod
   */
  lastResponse?: object;
  /**
   *
   * @type {number}
   * @memberof InvoiceLineItemPeriod
   */
  start?: number;
}
/**
 *
 * @export
 * @interface InvoiceSettings
 */
export interface InvoiceSettings {
  /**
   *
   * @type {Array<CustomField>}
   * @memberof InvoiceSettings
   */
  customFields?: CustomField[];
  /**
   *
   * @type {string}
   * @memberof InvoiceSettings
   */
  defaultPaymentMethod?: string;
  /**
   *
   * @type {PaymentMethod}
   * @memberof InvoiceSettings
   */
  defaultPaymentMethodObject?: PaymentMethod;
  /**
   *
   * @type {string}
   * @memberof InvoiceSettings
   */
  footer?: string;
  /**
   *
   * @type {object}
   * @memberof InvoiceSettings
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface JapanAddress
 */
export interface JapanAddress {
  /**
   *
   * @type {string}
   * @memberof JapanAddress
   */
  city?: string;
  /**
   *
   * @type {string}
   * @memberof JapanAddress
   */
  country?: string;
  /**
   *
   * @type {object}
   * @memberof JapanAddress
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof JapanAddress
   */
  line1?: string;
  /**
   *
   * @type {string}
   * @memberof JapanAddress
   */
  line2?: string;
  /**
   *
   * @type {string}
   * @memberof JapanAddress
   */
  postalCode?: string;
  /**
   *
   * @type {string}
   * @memberof JapanAddress
   */
  state?: string;
  /**
   *
   * @type {string}
   * @memberof JapanAddress
   */
  town?: string;
}
/**
 *
 * @export
 * @interface Level3
 */
export interface Level3 {
  /**
   *
   * @type {string}
   * @memberof Level3
   */
  customerReference?: string;
  /**
   *
   * @type {object}
   * @memberof Level3
   */
  lastResponse?: object;
  /**
   *
   * @type {Array<LineItem>}
   * @memberof Level3
   */
  lineItems?: LineItem[];
  /**
   *
   * @type {string}
   * @memberof Level3
   */
  merchantReference?: string;
  /**
   *
   * @type {string}
   * @memberof Level3
   */
  shippingAddressZip?: string;
  /**
   *
   * @type {number}
   * @memberof Level3
   */
  shippingAmount?: number;
  /**
   *
   * @type {string}
   * @memberof Level3
   */
  shippingFromZip?: string;
}
/**
 *
 * @export
 * @interface LineItem
 */
export interface LineItem {
  /**
   *
   * @type {number}
   * @memberof LineItem
   */
  discountAmount?: number;
  /**
   *
   * @type {object}
   * @memberof LineItem
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof LineItem
   */
  productCode?: string;
  /**
   *
   * @type {string}
   * @memberof LineItem
   */
  productDescription?: string;
  /**
   *
   * @type {number}
   * @memberof LineItem
   */
  quantity?: number;
  /**
   *
   * @type {number}
   * @memberof LineItem
   */
  taxAmount?: number;
  /**
   *
   * @type {number}
   * @memberof LineItem
   */
  unitCost?: number;
}
/**
 *
 * @export
 * @interface Location
 */
export interface Location {
  /**
   *
   * @type {string}
   * @memberof Location
   */
  city?: string;
  /**
   *
   * @type {string}
   * @memberof Location
   */
  country?: string;
  /**
   *
   * @type {object}
   * @memberof Location
   */
  lastResponse?: object;
  /**
   *
   * @type {number}
   * @memberof Location
   */
  latitude?: number;
  /**
   *
   * @type {number}
   * @memberof Location
   */
  longitude?: number;
  /**
   *
   * @type {string}
   * @memberof Location
   */
  region?: string;
}
/**
 *
 * @export
 * @interface Masterpass
 */
export interface Masterpass {
  /**
   *
   * @type {Address}
   * @memberof Masterpass
   */
  billingAddress?: Address;
  /**
   *
   * @type {string}
   * @memberof Masterpass
   */
  email?: string;
  /**
   *
   * @type {object}
   * @memberof Masterpass
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Masterpass
   */
  name?: string;
  /**
   *
   * @type {Address}
   * @memberof Masterpass
   */
  shippingAddress?: Address;
}
/**
 *
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
  /**
   *
   * @type {number}
   * @memberof ModelFile
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof ModelFile
   */
  filename?: string;
  /**
   *
   * @type {string}
   * @memberof ModelFile
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof ModelFile
   */
  lastResponse?: object;
  /**
   *
   * @type {FileLinkCollection}
   * @memberof ModelFile
   */
  links?: FileLinkCollection;
  /**
   *
   * @type {string}
   * @memberof ModelFile
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof ModelFile
   */
  purpose?: string;
  /**
   *
   * @type {number}
   * @memberof ModelFile
   */
  size?: number;
  /**
   *
   * @type {string}
   * @memberof ModelFile
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof ModelFile
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof ModelFile
   */
  url?: string;
}
/**
 *
 * @export
 * @interface Multibanco
 */
export interface Multibanco {
  /**
   *
   * @type {string}
   * @memberof Multibanco
   */
  entity?: string;
  /**
   *
   * @type {object}
   * @memberof Multibanco
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Multibanco
   */
  reference?: string;
}
/**
 *
 * @export
 * @interface NextAction
 */
export interface NextAction {
  /**
   *
   * @type {object}
   * @memberof NextAction
   */
  lastResponse?: object;
  /**
   *
   * @type {NextActionRedirectToUrl}
   * @memberof NextAction
   */
  redirectToUrl?: NextActionRedirectToUrl;
  /**
   *
   * @type {string}
   * @memberof NextAction
   */
  type?: string;
  /**
   *
   * @type {object}
   * @memberof NextAction
   */
  useStripeSdk?: object;
}
/**
 *
 * @export
 * @interface NextActionRedirectToUrl
 */
export interface NextActionRedirectToUrl {
  /**
   *
   * @type {object}
   * @memberof NextActionRedirectToUrl
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof NextActionRedirectToUrl
   */
  returnUrl?: string;
  /**
   *
   * @type {string}
   * @memberof NextActionRedirectToUrl
   */
  url?: string;
}
/**
 *
 * @export
 * @interface Order
 */
export interface Order {
  /**
   *
   * @type {number}
   * @memberof Order
   */
  amount?: number;
  /**
   *
   * @type {number}
   * @memberof Order
   */
  amountReturned?: number;
  /**
   *
   * @type {string}
   * @memberof Order
   */
  application?: string;
  /**
   *
   * @type {number}
   * @memberof Order
   */
  applicationFee?: number;
  /**
   *
   * @type {string}
   * @memberof Order
   */
  charge?: string;
  /**
   *
   * @type {Charge}
   * @memberof Order
   */
  chargeObject?: Charge;
  /**
   *
   * @type {number}
   * @memberof Order
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof Order
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof Order
   */
  customer?: string;
  /**
   *
   * @type {Customer}
   * @memberof Order
   */
  customerObject?: Customer;
  /**
   *
   * @type {string}
   * @memberof Order
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof Order
   */
  externalCouponCode?: string;
  /**
   *
   * @type {string}
   * @memberof Order
   */
  id?: string;
  /**
   *
   * @type {Array<OrderItem>}
   * @memberof Order
   */
  items?: OrderItem[];
  /**
   *
   * @type {object}
   * @memberof Order
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof Order
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Order
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Order
   */
  object?: string;
  /**
   *
   * @type {OrderReturnCollection}
   * @memberof Order
   */
  returns?: OrderReturnCollection;
  /**
   *
   * @type {string}
   * @memberof Order
   */
  selectedShippingMethod?: string;
  /**
   *
   * @type {ShippingDetails}
   * @memberof Order
   */
  shipping?: ShippingDetails;
  /**
   *
   * @type {Array<ShippingMethod>}
   * @memberof Order
   */
  shippingMethods?: ShippingMethod[];
  /**
   *
   * @type {string}
   * @memberof Order
   */
  status?: string;
  /**
   *
   * @type {StatusTransitions}
   * @memberof Order
   */
  statusTransitions?: StatusTransitions;
  /**
   *
   * @type {number}
   * @memberof Order
   */
  updated?: number;
  /**
   *
   * @type {string}
   * @memberof Order
   */
  upstreamId?: string;
}
/**
 *
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
  /**
   *
   * @type {number}
   * @memberof OrderItem
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof OrderItem
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof OrderItem
   */
  description?: string;
  /**
   *
   * @type {object}
   * @memberof OrderItem
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof OrderItem
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof OrderItem
   */
  parent?: string;
  /**
   *
   * @type {Sku}
   * @memberof OrderItem
   */
  parentObject?: Sku;
  /**
   *
   * @type {number}
   * @memberof OrderItem
   */
  quantity?: number;
  /**
   *
   * @type {string}
   * @memberof OrderItem
   */
  type?: string;
}
/**
 *
 * @export
 * @interface OrderReturn
 */
export interface OrderReturn {
  /**
   *
   * @type {number}
   * @memberof OrderReturn
   */
  amount?: number;
  /**
   *
   * @type {number}
   * @memberof OrderReturn
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof OrderReturn
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof OrderReturn
   */
  id?: string;
  /**
   *
   * @type {Array<OrderItem>}
   * @memberof OrderReturn
   */
  items?: OrderItem[];
  /**
   *
   * @type {object}
   * @memberof OrderReturn
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof OrderReturn
   */
  livemode?: boolean;
  /**
   *
   * @type {string}
   * @memberof OrderReturn
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof OrderReturn
   */
  order?: string;
  /**
   *
   * @type {Order}
   * @memberof OrderReturn
   */
  orderObject?: Order;
  /**
   *
   * @type {string}
   * @memberof OrderReturn
   */
  refund?: string;
  /**
   *
   * @type {Refund}
   * @memberof OrderReturn
   */
  refundObject?: Refund;
}
/**
 *
 * @export
 * @interface OrderReturnCollection
 */
export interface OrderReturnCollection {
  /**
   *
   * @type {number}
   * @memberof OrderReturnCollection
   */
  count?: number;
  /**
   *
   * @type {Array<OrderReturn>}
   * @memberof OrderReturnCollection
   */
  data?: OrderReturn[];
  /**
   *
   * @type {boolean}
   * @memberof OrderReturnCollection
   */
  hasMore?: boolean;
  /**
   *
   * @type {object}
   * @memberof OrderReturnCollection
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof OrderReturnCollection
   */
  object?: string;
  /**
   *
   * @type {RequestOptions}
   * @memberof OrderReturnCollection
   */
  _requestOptions?: RequestOptions;
  /**
   *
   * @type {object}
   * @memberof OrderReturnCollection
   */
  requestParams?: object;
  /**
   *
   * @type {number}
   * @memberof OrderReturnCollection
   */
  totalCount?: number;
  /**
   *
   * @type {string}
   * @memberof OrderReturnCollection
   */
  url?: string;
}
/**
 *
 * @export
 * @interface Outcome
 */
export interface Outcome {
  /**
   *
   * @type {object}
   * @memberof Outcome
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Outcome
   */
  networkStatus?: string;
  /**
   *
   * @type {string}
   * @memberof Outcome
   */
  reason?: string;
  /**
   *
   * @type {string}
   * @memberof Outcome
   */
  riskLevel?: string;
  /**
   *
   * @type {number}
   * @memberof Outcome
   */
  riskScore?: number;
  /**
   *
   * @type {string}
   * @memberof Outcome
   */
  rule?: string;
  /**
   *
   * @type {Rule}
   * @memberof Outcome
   */
  ruleObject?: Rule;
  /**
   *
   * @type {string}
   * @memberof Outcome
   */
  sellerMessage?: string;
  /**
   *
   * @type {string}
   * @memberof Outcome
   */
  type?: string;
}
/**
 *
 * @export
 * @interface P24
 */
export interface P24 {
  /**
   *
   * @type {object}
   * @memberof P24
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof P24
   */
  reference?: string;
  /**
   *
   * @type {string}
   * @memberof P24
   */
  verifiedName?: string;
}
/**
 *
 * @export
 * @interface PackageDimensions
 */
export interface PackageDimensions {
  /**
   *
   * @type {number}
   * @memberof PackageDimensions
   */
  height?: number;
  /**
   *
   * @type {object}
   * @memberof PackageDimensions
   */
  lastResponse?: object;
  /**
   *
   * @type {number}
   * @memberof PackageDimensions
   */
  length?: number;
  /**
   *
   * @type {number}
   * @memberof PackageDimensions
   */
  weight?: number;
  /**
   *
   * @type {number}
   * @memberof PackageDimensions
   */
  width?: number;
}
/**
 *
 * @export
 * @interface PaymentIntent
 */
export interface PaymentIntent {
  /**
   *
   * @type {number}
   * @memberof PaymentIntent
   */
  amount?: number;
  /**
   *
   * @type {number}
   * @memberof PaymentIntent
   */
  amountCapturable?: number;
  /**
   *
   * @type {number}
   * @memberof PaymentIntent
   */
  amountReceived?: number;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  application?: string;
  /**
   *
   * @type {number}
   * @memberof PaymentIntent
   */
  applicationFeeAmount?: number;
  /**
   *
   * @type {Application}
   * @memberof PaymentIntent
   */
  applicationObject?: Application;
  /**
   *
   * @type {number}
   * @memberof PaymentIntent
   */
  canceledAt?: number;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  cancellationReason?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  captureMethod?: string;
  /**
   *
   * @type {ChargeCollection}
   * @memberof PaymentIntent
   */
  charges?: ChargeCollection;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  clientSecret?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  confirmationMethod?: string;
  /**
   *
   * @type {number}
   * @memberof PaymentIntent
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  customer?: string;
  /**
   *
   * @type {Customer}
   * @memberof PaymentIntent
   */
  customerObject?: Customer;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  invoice?: string;
  /**
   *
   * @type {Invoice}
   * @memberof PaymentIntent
   */
  invoiceObject?: Invoice;
  /**
   *
   * @type {StripeError}
   * @memberof PaymentIntent
   */
  lastPaymentError?: StripeError;
  /**
   *
   * @type {object}
   * @memberof PaymentIntent
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof PaymentIntent
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof PaymentIntent
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {NextAction}
   * @memberof PaymentIntent
   */
  nextAction?: NextAction;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  onBehalfOf?: string;
  /**
   *
   * @type {Account}
   * @memberof PaymentIntent
   */
  onBehalfOfObject?: Account;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  paymentMethod?: string;
  /**
   *
   * @type {PaymentMethod}
   * @memberof PaymentIntent
   */
  paymentMethodObject?: PaymentMethod;
  /**
   *
   * @type {Array<string>}
   * @memberof PaymentIntent
   */
  paymentMethodTypes?: string[];
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  receiptEmail?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  review?: string;
  /**
   *
   * @type {Review}
   * @memberof PaymentIntent
   */
  reviewObject?: Review;
  /**
   *
   * @type {ShippingDetails}
   * @memberof PaymentIntent
   */
  shipping?: ShippingDetails;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  source?: string;
  /**
   *
   * @type {PaymentSource}
   * @memberof PaymentIntent
   */
  sourceObject?: PaymentSource;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  statementDescriptor?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  status?: string;
  /**
   *
   * @type {TransferData}
   * @memberof PaymentIntent
   */
  transferData?: TransferData;
  /**
   *
   * @type {string}
   * @memberof PaymentIntent
   */
  transferGroup?: string;
}
/**
 *
 * @export
 * @interface PaymentMethod
 */
export interface PaymentMethod {
  /**
   *
   * @type {BillingDetails}
   * @memberof PaymentMethod
   */
  billingDetails?: BillingDetails;
  /**
   *
   * @type {Card}
   * @memberof PaymentMethod
   */
  card?: Card;
  /**
   *
   * @type {CardPresent}
   * @memberof PaymentMethod
   */
  cardPresent?: CardPresent;
  /**
   *
   * @type {number}
   * @memberof PaymentMethod
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  customer?: string;
  /**
   *
   * @type {Customer}
   * @memberof PaymentMethod
   */
  customerObject?: Customer;
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof PaymentMethod
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof PaymentMethod
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof PaymentMethod
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  type?: string;
}
/**
 *
 * @export
 * @interface PaymentMethodDetails
 */
export interface PaymentMethodDetails {
  /**
   *
   * @type {AchCreditTransfer}
   * @memberof PaymentMethodDetails
   */
  achCreditTransfer?: AchCreditTransfer;
  /**
   *
   * @type {AchDebit}
   * @memberof PaymentMethodDetails
   */
  achDebit?: AchDebit;
  /**
   *
   * @type {AcssDebit}
   * @memberof PaymentMethodDetails
   */
  acssDebit?: AcssDebit;
  /**
   *
   * @type {Alipay}
   * @memberof PaymentMethodDetails
   */
  alipay?: Alipay;
  /**
   *
   * @type {Bancontact}
   * @memberof PaymentMethodDetails
   */
  bancontact?: Bancontact;
  /**
   *
   * @type {Bitcoin}
   * @memberof PaymentMethodDetails
   */
  bitcoin?: Bitcoin;
  /**
   *
   * @type {Card}
   * @memberof PaymentMethodDetails
   */
  card?: Card;
  /**
   *
   * @type {CardPresent}
   * @memberof PaymentMethodDetails
   */
  cardPresent?: CardPresent;
  /**
   *
   * @type {Eps}
   * @memberof PaymentMethodDetails
   */
  eps?: Eps;
  /**
   *
   * @type {Giropay}
   * @memberof PaymentMethodDetails
   */
  giropay?: Giropay;
  /**
   *
   * @type {Ideal}
   * @memberof PaymentMethodDetails
   */
  ideal?: Ideal;
  /**
   *
   * @type {object}
   * @memberof PaymentMethodDetails
   */
  lastResponse?: object;
  /**
   *
   * @type {Multibanco}
   * @memberof PaymentMethodDetails
   */
  multibanco?: Multibanco;
  /**
   *
   * @type {P24}
   * @memberof PaymentMethodDetails
   */
  p24?: P24;
  /**
   *
   * @type {SepaCreditTransfer}
   * @memberof PaymentMethodDetails
   */
  sepaCreditTransfer?: SepaCreditTransfer;
  /**
   *
   * @type {SepaDebit}
   * @memberof PaymentMethodDetails
   */
  sepaDebit?: SepaDebit;
  /**
   *
   * @type {Sofort}
   * @memberof PaymentMethodDetails
   */
  sofort?: Sofort;
  /**
   *
   * @type {StripeAccount}
   * @memberof PaymentMethodDetails
   */
  stripeAccount?: StripeAccount;
  /**
   *
   * @type {string}
   * @memberof PaymentMethodDetails
   */
  type?: string;
  /**
   *
   * @type {Wechat}
   * @memberof PaymentMethodDetails
   */
  wechat?: Wechat;
}
/**
 *
 * @export
 * @interface PaymentSource
 */
export interface PaymentSource {
  /**
   *
   * @type {string}
   * @memberof PaymentSource
   */
  id?: string;
}
/**
 *
 * @export
 * @interface PaymentSourceCollection
 */
export interface PaymentSourceCollection {
  /**
   *
   * @type {number}
   * @memberof PaymentSourceCollection
   */
  count?: number;
  /**
   *
   * @type {Array<PaymentSource>}
   * @memberof PaymentSourceCollection
   */
  data?: PaymentSource[];
  /**
   *
   * @type {boolean}
   * @memberof PaymentSourceCollection
   */
  hasMore?: boolean;
  /**
   *
   * @type {object}
   * @memberof PaymentSourceCollection
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof PaymentSourceCollection
   */
  object?: string;
  /**
   *
   * @type {RequestOptions}
   * @memberof PaymentSourceCollection
   */
  _requestOptions?: RequestOptions;
  /**
   *
   * @type {object}
   * @memberof PaymentSourceCollection
   */
  requestParams?: object;
  /**
   *
   * @type {number}
   * @memberof PaymentSourceCollection
   */
  totalCount?: number;
  /**
   *
   * @type {string}
   * @memberof PaymentSourceCollection
   */
  url?: string;
}
/**
 *
 * @export
 * @interface PayoutSchedule
 */
export interface PayoutSchedule {
  /**
   *
   * @type {number}
   * @memberof PayoutSchedule
   */
  delayDays?: number;
  /**
   *
   * @type {string}
   * @memberof PayoutSchedule
   */
  interval?: string;
  /**
   *
   * @type {object}
   * @memberof PayoutSchedule
   */
  lastResponse?: object;
  /**
   *
   * @type {number}
   * @memberof PayoutSchedule
   */
  monthlyAnchor?: number;
  /**
   *
   * @type {string}
   * @memberof PayoutSchedule
   */
  weeklyAnchor?: string;
}
/**
 *
 * @export
 * @interface Person
 */
export interface Person {
  /**
   *
   * @type {string}
   * @memberof Person
   */
  account?: string;
  /**
   *
   * @type {Address}
   * @memberof Person
   */
  address?: Address;
  /**
   *
   * @type {JapanAddress}
   * @memberof Person
   */
  addressKana?: JapanAddress;
  /**
   *
   * @type {JapanAddress}
   * @memberof Person
   */
  addressKanji?: JapanAddress;
  /**
   *
   * @type {number}
   * @memberof Person
   */
  created?: number;
  /**
   *
   * @type {boolean}
   * @memberof Person
   */
  deleted?: boolean;
  /**
   *
   * @type {DateOfBirth}
   * @memberof Person
   */
  dob?: DateOfBirth;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  firstName?: string;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  firstNameKana?: string;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  firstNameKanji?: string;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  gender?: string;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  id?: string;
  /**
   *
   * @type {boolean}
   * @memberof Person
   */
  idNumberProvided?: boolean;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  lastName?: string;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  lastNameKana?: string;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  lastNameKanji?: string;
  /**
   *
   * @type {object}
   * @memberof Person
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  maidenName?: string;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Person
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Person
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  phone?: string;
  /**
   *
   * @type {Relationship}
   * @memberof Person
   */
  relationship?: Relationship;
  /**
   *
   * @type {Requirements}
   * @memberof Person
   */
  requirements?: Requirements;
  /**
   *
   * @type {boolean}
   * @memberof Person
   */
  ssnLast4Provided?: boolean;
  /**
   *
   * @type {Verification}
   * @memberof Person
   */
  verification?: Verification;
}
/**
 *
 * @export
 * @interface Plan
 */
export interface Plan {
  /**
   *
   * @type {boolean}
   * @memberof Plan
   */
  active?: boolean;
  /**
   *
   * @type {string}
   * @memberof Plan
   */
  aggregateUsage?: string;
  /**
   *
   * @type {number}
   * @memberof Plan
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof Plan
   */
  billingScheme?: string;
  /**
   *
   * @type {number}
   * @memberof Plan
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof Plan
   */
  currency?: string;
  /**
   *
   * @type {boolean}
   * @memberof Plan
   */
  deleted?: boolean;
  /**
   *
   * @type {string}
   * @memberof Plan
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Plan
   */
  interval?: string;
  /**
   *
   * @type {number}
   * @memberof Plan
   */
  intervalCount?: number;
  /**
   *
   * @type {object}
   * @memberof Plan
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof Plan
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Plan
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Plan
   */
  nickname?: string;
  /**
   *
   * @type {string}
   * @memberof Plan
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof Plan
   */
  product?: string;
  /**
   *
   * @type {Product}
   * @memberof Plan
   */
  productObject?: Product;
  /**
   *
   * @type {Array<Tier>}
   * @memberof Plan
   */
  tiers?: Tier[];
  /**
   *
   * @type {string}
   * @memberof Plan
   */
  tiersMode?: string;
  /**
   *
   * @type {TransformUsage}
   * @memberof Plan
   */
  transformUsage?: TransformUsage;
  /**
   *
   * @type {number}
   * @memberof Plan
   */
  trialPeriodDays?: number;
  /**
   *
   * @type {string}
   * @memberof Plan
   */
  usageType?: string;
}
/**
 *
 * @export
 * @interface Product
 */
export interface Product {
  /**
   *
   * @type {boolean}
   * @memberof Product
   */
  active?: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  attributes?: string[];
  /**
   *
   * @type {string}
   * @memberof Product
   */
  caption?: string;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  created?: number;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  deactivateOn?: string[];
  /**
   *
   * @type {boolean}
   * @memberof Product
   */
  deleted?: boolean;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  id?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  images?: string[];
  /**
   *
   * @type {object}
   * @memberof Product
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof Product
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Product
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Product
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  object?: string;
  /**
   *
   * @type {PackageDimensions}
   * @memberof Product
   */
  packageDimensions?: PackageDimensions;
  /**
   *
   * @type {boolean}
   * @memberof Product
   */
  shippable?: boolean;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  statementDescriptor?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  unitLabel?: string;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  updated?: number;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  url?: string;
}
/**
 *
 * @export
 * @interface Receipt
 */
export interface Receipt {
  /**
   *
   * @type {string}
   * @memberof Receipt
   */
  applicationCryptogram?: string;
  /**
   *
   * @type {string}
   * @memberof Receipt
   */
  applicationPreferredName?: string;
  /**
   *
   * @type {string}
   * @memberof Receipt
   */
  authorizationCode?: string;
  /**
   *
   * @type {string}
   * @memberof Receipt
   */
  authorizationResponseCode?: string;
  /**
   *
   * @type {string}
   * @memberof Receipt
   */
  cardholderVerificationMethod?: string;
  /**
   *
   * @type {string}
   * @memberof Receipt
   */
  dedicatedFileName?: string;
  /**
   *
   * @type {object}
   * @memberof Receipt
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Receipt
   */
  terminalVerificationResults?: string;
  /**
   *
   * @type {string}
   * @memberof Receipt
   */
  transactionStatusInformation?: string;
}
/**
 *
 * @export
 * @interface Recipient
 */
export interface Recipient {
  /**
   *
   * @type {BankAccount}
   * @memberof Recipient
   */
  activeAccount?: BankAccount;
  /**
   *
   * @type {CardCollection}
   * @memberof Recipient
   */
  cards?: CardCollection;
  /**
   *
   * @type {number}
   * @memberof Recipient
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof Recipient
   */
  defaultCard?: string;
  /**
   *
   * @type {Card}
   * @memberof Recipient
   */
  defaultCardObject?: Card;
  /**
   *
   * @type {boolean}
   * @memberof Recipient
   */
  deleted?: boolean;
  /**
   *
   * @type {string}
   * @memberof Recipient
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Recipient
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof Recipient
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof Recipient
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof Recipient
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Recipient
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Recipient
   */
  migratedTo?: string;
  /**
   *
   * @type {Account}
   * @memberof Recipient
   */
  migratedToObject?: Account;
  /**
   *
   * @type {string}
   * @memberof Recipient
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Recipient
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof Recipient
   */
  rolledBackFrom?: string;
  /**
   *
   * @type {Account}
   * @memberof Recipient
   */
  rolledBackFromObject?: Account;
  /**
   *
   * @type {string}
   * @memberof Recipient
   */
  type?: string;
  /**
   *
   * @type {boolean}
   * @memberof Recipient
   */
  verified?: boolean;
}
/**
 *
 * @export
 * @interface Refund
 */
export interface Refund {
  /**
   *
   * @type {number}
   * @memberof Refund
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof Refund
   */
  balanceTransaction?: string;
  /**
   *
   * @type {BalanceTransaction}
   * @memberof Refund
   */
  balanceTransactionObject?: BalanceTransaction;
  /**
   *
   * @type {string}
   * @memberof Refund
   */
  charge?: string;
  /**
   *
   * @type {Charge}
   * @memberof Refund
   */
  chargeObject?: Charge;
  /**
   *
   * @type {number}
   * @memberof Refund
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof Refund
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof Refund
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Refund
   */
  failureBalanceTransaction?: string;
  /**
   *
   * @type {BalanceTransaction}
   * @memberof Refund
   */
  failureBalanceTransactionObject?: BalanceTransaction;
  /**
   *
   * @type {string}
   * @memberof Refund
   */
  failureReason?: string;
  /**
   *
   * @type {string}
   * @memberof Refund
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof Refund
   */
  lastResponse?: object;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Refund
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Refund
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof Refund
   */
  reason?: string;
  /**
   *
   * @type {string}
   * @memberof Refund
   */
  receiptNumber?: string;
  /**
   *
   * @type {string}
   * @memberof Refund
   */
  sourceTransferReversal?: string;
  /**
   *
   * @type {TransferReversal}
   * @memberof Refund
   */
  sourceTransferReversalObject?: TransferReversal;
  /**
   *
   * @type {string}
   * @memberof Refund
   */
  status?: string;
  /**
   *
   * @type {string}
   * @memberof Refund
   */
  transferReversal?: string;
  /**
   *
   * @type {TransferReversal}
   * @memberof Refund
   */
  transferReversalObject?: TransferReversal;
}
/**
 *
 * @export
 * @interface RefundCollection
 */
export interface RefundCollection {
  /**
   *
   * @type {number}
   * @memberof RefundCollection
   */
  count?: number;
  /**
   *
   * @type {Array<Refund>}
   * @memberof RefundCollection
   */
  data?: Refund[];
  /**
   *
   * @type {boolean}
   * @memberof RefundCollection
   */
  hasMore?: boolean;
  /**
   *
   * @type {object}
   * @memberof RefundCollection
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof RefundCollection
   */
  object?: string;
  /**
   *
   * @type {RequestOptions}
   * @memberof RefundCollection
   */
  _requestOptions?: RequestOptions;
  /**
   *
   * @type {object}
   * @memberof RefundCollection
   */
  requestParams?: object;
  /**
   *
   * @type {number}
   * @memberof RefundCollection
   */
  totalCount?: number;
  /**
   *
   * @type {string}
   * @memberof RefundCollection
   */
  url?: string;
}
/**
 *
 * @export
 * @interface Relationship
 */
export interface Relationship {
  /**
   *
   * @type {boolean}
   * @memberof Relationship
   */
  accountOpener?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Relationship
   */
  director?: boolean;
  /**
   *
   * @type {object}
   * @memberof Relationship
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof Relationship
   */
  owner?: boolean;
  /**
   *
   * @type {number}
   * @memberof Relationship
   */
  percentOwnership?: number;
  /**
   *
   * @type {string}
   * @memberof Relationship
   */
  title?: string;
}
/**
 *
 * @export
 * @interface RequestOptions
 */
export interface RequestOptions {
  /**
   *
   * @type {string}
   * @memberof RequestOptions
   */
  apiKey?: string;
  /**
   *
   * @type {string}
   * @memberof RequestOptions
   */
  clientId?: string;
  /**
   *
   * @type {number}
   * @memberof RequestOptions
   */
  connectTimeout?: number;
  /**
   *
   * @type {string}
   * @memberof RequestOptions
   */
  idempotencyKey?: string;
  /**
   *
   * @type {number}
   * @memberof RequestOptions
   */
  readTimeout?: number;
  /**
   *
   * @type {string}
   * @memberof RequestOptions
   */
  stripeAccount?: string;
  /**
   *
   * @type {string}
   * @memberof RequestOptions
   */
  stripeVersion?: string;
  /**
   *
   * @type {string}
   * @memberof RequestOptions
   */
  stripeVersionOverride?: string;
}
/**
 *
 * @export
 * @interface Requirements
 */
export interface Requirements {
  /**
   *
   * @type {number}
   * @memberof Requirements
   */
  currentDeadline?: number;
  /**
   *
   * @type {Array<string>}
   * @memberof Requirements
   */
  currentlyDue?: string[];
  /**
   *
   * @type {string}
   * @memberof Requirements
   */
  disabledReason?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Requirements
   */
  eventuallyDue?: string[];
  /**
   *
   * @type {object}
   * @memberof Requirements
   */
  lastResponse?: object;
  /**
   *
   * @type {Array<string>}
   * @memberof Requirements
   */
  pastDue?: string[];
}
/**
 *
 * @export
 * @interface Review
 */
export interface Review {
  /**
   *
   * @type {string}
   * @memberof Review
   */
  billingZip?: string;
  /**
   *
   * @type {string}
   * @memberof Review
   */
  charge?: string;
  /**
   *
   * @type {Charge}
   * @memberof Review
   */
  chargeObject?: Charge;
  /**
   *
   * @type {string}
   * @memberof Review
   */
  closedReason?: string;
  /**
   *
   * @type {number}
   * @memberof Review
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof Review
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Review
   */
  ipAddress?: string;
  /**
   *
   * @type {Location}
   * @memberof Review
   */
  ipAddressLocation?: Location;
  /**
   *
   * @type {object}
   * @memberof Review
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof Review
   */
  livemode?: boolean;
  /**
   *
   * @type {string}
   * @memberof Review
   */
  object?: string;
  /**
   *
   * @type {boolean}
   * @memberof Review
   */
  open?: boolean;
  /**
   *
   * @type {string}
   * @memberof Review
   */
  openedReason?: string;
  /**
   *
   * @type {string}
   * @memberof Review
   */
  paymentIntent?: string;
  /**
   *
   * @type {PaymentIntent}
   * @memberof Review
   */
  paymentIntentObject?: PaymentIntent;
  /**
   *
   * @type {string}
   * @memberof Review
   */
  reason?: string;
  /**
   *
   * @type {Session}
   * @memberof Review
   */
  session?: Session;
}
/**
 *
 * @export
 * @interface Rule
 */
export interface Rule {
  /**
   *
   * @type {string}
   * @memberof Rule
   */
  action?: string;
  /**
   *
   * @type {boolean}
   * @memberof Rule
   */
  deleted?: boolean;
  /**
   *
   * @type {string}
   * @memberof Rule
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof Rule
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Rule
   */
  predicate?: string;
}
/**
 *
 * @export
 * @interface SamsungPay
 */
export interface SamsungPay {
  /**
   *
   * @type {object}
   * @memberof SamsungPay
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface SepaCreditTransfer
 */
export interface SepaCreditTransfer {
  /**
   *
   * @type {string}
   * @memberof SepaCreditTransfer
   */
  bankName?: string;
  /**
   *
   * @type {string}
   * @memberof SepaCreditTransfer
   */
  bic?: string;
  /**
   *
   * @type {string}
   * @memberof SepaCreditTransfer
   */
  iban?: string;
  /**
   *
   * @type {object}
   * @memberof SepaCreditTransfer
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface SepaDebit
 */
export interface SepaDebit {
  /**
   *
   * @type {string}
   * @memberof SepaDebit
   */
  bankCode?: string;
  /**
   *
   * @type {string}
   * @memberof SepaDebit
   */
  branchCode?: string;
  /**
   *
   * @type {string}
   * @memberof SepaDebit
   */
  country?: string;
  /**
   *
   * @type {string}
   * @memberof SepaDebit
   */
  fingerprint?: string;
  /**
   *
   * @type {string}
   * @memberof SepaDebit
   */
  last4?: string;
  /**
   *
   * @type {object}
   * @memberof SepaDebit
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface Session
 */
export interface Session {
  /**
   *
   * @type {string}
   * @memberof Session
   */
  browser?: string;
  /**
   *
   * @type {string}
   * @memberof Session
   */
  device?: string;
  /**
   *
   * @type {object}
   * @memberof Session
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Session
   */
  platform?: string;
  /**
   *
   * @type {string}
   * @memberof Session
   */
  version?: string;
}
/**
 *
 * @export
 * @interface Settings
 */
export interface Settings {
  /**
   *
   * @type {SettingsBranding}
   * @memberof Settings
   */
  branding?: SettingsBranding;
  /**
   *
   * @type {SettingsCardPayments}
   * @memberof Settings
   */
  cardPayments?: SettingsCardPayments;
  /**
   *
   * @type {SettingsDashboard}
   * @memberof Settings
   */
  dashboard?: SettingsDashboard;
  /**
   *
   * @type {object}
   * @memberof Settings
   */
  lastResponse?: object;
  /**
   *
   * @type {SettingsPayments}
   * @memberof Settings
   */
  payments?: SettingsPayments;
  /**
   *
   * @type {SettingsPayouts}
   * @memberof Settings
   */
  payouts?: SettingsPayouts;
}
/**
 *
 * @export
 * @interface SettingsBranding
 */
export interface SettingsBranding {
  /**
   *
   * @type {string}
   * @memberof SettingsBranding
   */
  icon?: string;
  /**
   *
   * @type {any}
   * @memberof SettingsBranding
   */
  iconObject?: any;
  /**
   *
   * @type {object}
   * @memberof SettingsBranding
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof SettingsBranding
   */
  logo?: string;
  /**
   *
   * @type {any}
   * @memberof SettingsBranding
   */
  logoObject?: any;
  /**
   *
   * @type {string}
   * @memberof SettingsBranding
   */
  primaryColor?: string;
}
/**
 *
 * @export
 * @interface SettingsCardPayments
 */
export interface SettingsCardPayments {
  /**
   *
   * @type {DeclineChargeOn}
   * @memberof SettingsCardPayments
   */
  declineOn?: DeclineChargeOn;
  /**
   *
   * @type {object}
   * @memberof SettingsCardPayments
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof SettingsCardPayments
   */
  statementDescriptorPrefix?: string;
}
/**
 *
 * @export
 * @interface SettingsDashboard
 */
export interface SettingsDashboard {
  /**
   *
   * @type {string}
   * @memberof SettingsDashboard
   */
  displayName?: string;
  /**
   *
   * @type {object}
   * @memberof SettingsDashboard
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof SettingsDashboard
   */
  timezone?: string;
}
/**
 *
 * @export
 * @interface SettingsPayments
 */
export interface SettingsPayments {
  /**
   *
   * @type {object}
   * @memberof SettingsPayments
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof SettingsPayments
   */
  statementDescriptor?: string;
  /**
   *
   * @type {string}
   * @memberof SettingsPayments
   */
  statementDescriptorKana?: string;
  /**
   *
   * @type {string}
   * @memberof SettingsPayments
   */
  statementDescriptorKanji?: string;
}
/**
 *
 * @export
 * @interface SettingsPayouts
 */
export interface SettingsPayouts {
  /**
   *
   * @type {boolean}
   * @memberof SettingsPayouts
   */
  debitNegativeBalances?: boolean;
  /**
   *
   * @type {object}
   * @memberof SettingsPayouts
   */
  lastResponse?: object;
  /**
   *
   * @type {PayoutSchedule}
   * @memberof SettingsPayouts
   */
  schedule?: PayoutSchedule;
  /**
   *
   * @type {string}
   * @memberof SettingsPayouts
   */
  statementDescriptor?: string;
}
/**
 *
 * @export
 * @interface ShippingDetails
 */
export interface ShippingDetails {
  /**
   *
   * @type {Address}
   * @memberof ShippingDetails
   */
  address?: Address;
  /**
   *
   * @type {string}
   * @memberof ShippingDetails
   */
  carrier?: string;
  /**
   *
   * @type {object}
   * @memberof ShippingDetails
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof ShippingDetails
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ShippingDetails
   */
  phone?: string;
  /**
   *
   * @type {string}
   * @memberof ShippingDetails
   */
  trackingNumber?: string;
}
/**
 *
 * @export
 * @interface ShippingMethod
 */
export interface ShippingMethod {
  /**
   *
   * @type {number}
   * @memberof ShippingMethod
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof ShippingMethod
   */
  currency?: string;
  /**
   *
   * @type {DeliveryEstimate}
   * @memberof ShippingMethod
   */
  deliveryEstimate?: DeliveryEstimate;
  /**
   *
   * @type {string}
   * @memberof ShippingMethod
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ShippingMethod
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof ShippingMethod
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface Sku
 */
export interface Sku {
  /**
   *
   * @type {boolean}
   * @memberof Sku
   */
  active?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Sku
   */
  attributes?: { [key: string]: string };
  /**
   *
   * @type {number}
   * @memberof Sku
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof Sku
   */
  currency?: string;
  /**
   *
   * @type {boolean}
   * @memberof Sku
   */
  deleted?: boolean;
  /**
   *
   * @type {string}
   * @memberof Sku
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Sku
   */
  image?: string;
  /**
   *
   * @type {Inventory}
   * @memberof Sku
   */
  inventory?: Inventory;
  /**
   *
   * @type {object}
   * @memberof Sku
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof Sku
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Sku
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Sku
   */
  object?: string;
  /**
   *
   * @type {PackageDimensions}
   * @memberof Sku
   */
  packageDimensions?: PackageDimensions;
  /**
   *
   * @type {number}
   * @memberof Sku
   */
  price?: number;
  /**
   *
   * @type {string}
   * @memberof Sku
   */
  product?: string;
  /**
   *
   * @type {Product}
   * @memberof Sku
   */
  productObject?: Product;
  /**
   *
   * @type {number}
   * @memberof Sku
   */
  updated?: number;
}
/**
 *
 * @export
 * @interface Sofort
 */
export interface Sofort {
  /**
   *
   * @type {string}
   * @memberof Sofort
   */
  bankCode?: string;
  /**
   *
   * @type {string}
   * @memberof Sofort
   */
  bankName?: string;
  /**
   *
   * @type {string}
   * @memberof Sofort
   */
  bic?: string;
  /**
   *
   * @type {string}
   * @memberof Sofort
   */
  country?: string;
  /**
   *
   * @type {string}
   * @memberof Sofort
   */
  ibanLast4?: string;
  /**
   *
   * @type {object}
   * @memberof Sofort
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Sofort
   */
  verifiedName?: string;
}
/**
 *
 * @export
 * @interface StatusTransitions
 */
export interface StatusTransitions {
  /**
   *
   * @type {number}
   * @memberof StatusTransitions
   */
  canceled?: number;
  /**
   *
   * @type {number}
   * @memberof StatusTransitions
   */
  finalizedAt?: number;
  /**
   *
   * @type {number}
   * @memberof StatusTransitions
   */
  fulfiled?: number;
  /**
   *
   * @type {object}
   * @memberof StatusTransitions
   */
  lastResponse?: object;
  /**
   *
   * @type {number}
   * @memberof StatusTransitions
   */
  markedUncollectibleAt?: number;
  /**
   *
   * @type {number}
   * @memberof StatusTransitions
   */
  paid?: number;
  /**
   *
   * @type {number}
   * @memberof StatusTransitions
   */
  paidAt?: number;
  /**
   *
   * @type {number}
   * @memberof StatusTransitions
   */
  returned?: number;
  /**
   *
   * @type {number}
   * @memberof StatusTransitions
   */
  voidedAt?: number;
}
/**
 *
 * @export
 * @interface StripeAccount
 */
export interface StripeAccount {
  /**
   *
   * @type {object}
   * @memberof StripeAccount
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface StripeError
 */
export interface StripeError {
  /**
   *
   * @type {string}
   * @memberof StripeError
   */
  charge?: string;
  /**
   *
   * @type {string}
   * @memberof StripeError
   */
  code?: string;
  /**
   *
   * @type {string}
   * @memberof StripeError
   */
  declineCode?: string;
  /**
   *
   * @type {string}
   * @memberof StripeError
   */
  docUrl?: string;
  /**
   *
   * @type {object}
   * @memberof StripeError
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof StripeError
   */
  message?: string;
  /**
   *
   * @type {string}
   * @memberof StripeError
   */
  param?: string;
  /**
   *
   * @type {PaymentIntent}
   * @memberof StripeError
   */
  paymentIntent?: PaymentIntent;
  /**
   *
   * @type {PaymentMethod}
   * @memberof StripeError
   */
  paymentMethod?: PaymentMethod;
  /**
   *
   * @type {PaymentSource}
   * @memberof StripeError
   */
  source?: PaymentSource;
  /**
   *
   * @type {string}
   * @memberof StripeError
   */
  type?: string;
}
/**
 *
 * @export
 * @interface Subscription
 */
export interface Subscription {
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  applicationFeePercent?: number;
  /**
   *
   * @type {string}
   * @memberof Subscription
   */
  billing?: string;
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  billingCycleAnchor?: number;
  /**
   *
   * @type {BillingThresholds}
   * @memberof Subscription
   */
  billingThresholds?: BillingThresholds;
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  cancelAt?: number;
  /**
   *
   * @type {boolean}
   * @memberof Subscription
   */
  cancelAtPeriodEnd?: boolean;
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  canceledAt?: number;
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  created?: number;
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  currentPeriodEnd?: number;
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  currentPeriodStart?: number;
  /**
   *
   * @type {string}
   * @memberof Subscription
   */
  customer?: string;
  /**
   *
   * @type {Customer}
   * @memberof Subscription
   */
  customerObject?: Customer;
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  daysUntilDue?: number;
  /**
   *
   * @type {string}
   * @memberof Subscription
   */
  defaultPaymentMethod?: string;
  /**
   *
   * @type {PaymentMethod}
   * @memberof Subscription
   */
  defaultPaymentMethodObject?: PaymentMethod;
  /**
   *
   * @type {string}
   * @memberof Subscription
   */
  defaultSource?: string;
  /**
   *
   * @type {PaymentSource}
   * @memberof Subscription
   */
  defaultSourceObject?: PaymentSource;
  /**
   *
   * @type {Array<TaxRate>}
   * @memberof Subscription
   */
  defaultTaxRates?: TaxRate[];
  /**
   *
   * @type {Discount}
   * @memberof Subscription
   */
  discount?: Discount;
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  endedAt?: number;
  /**
   *
   * @type {string}
   * @memberof Subscription
   */
  id?: string;
  /**
   *
   * @type {SubscriptionItemCollection}
   * @memberof Subscription
   */
  items?: SubscriptionItemCollection;
  /**
   *
   * @type {object}
   * @memberof Subscription
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Subscription
   */
  latestInvoice?: string;
  /**
   *
   * @type {Invoice}
   * @memberof Subscription
   */
  latestInvoiceObject?: Invoice;
  /**
   *
   * @type {boolean}
   * @memberof Subscription
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Subscription
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Subscription
   */
  object?: string;
  /**
   *
   * @type {Plan}
   * @memberof Subscription
   */
  plan?: Plan;
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  quantity?: number;
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  start?: number;
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  startDate?: number;
  /**
   *
   * @type {string}
   * @memberof Subscription
   */
  status?: string;
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  taxPercent?: number;
  /**
   *
   * @type {TransferData}
   * @memberof Subscription
   */
  transferData?: TransferData;
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  trialEnd?: number;
  /**
   *
   * @type {number}
   * @memberof Subscription
   */
  trialStart?: number;
}
/**
 *
 * @export
 * @interface SubscriptionCollection
 */
export interface SubscriptionCollection {
  /**
   *
   * @type {number}
   * @memberof SubscriptionCollection
   */
  count?: number;
  /**
   *
   * @type {Array<Subscription>}
   * @memberof SubscriptionCollection
   */
  data?: Subscription[];
  /**
   *
   * @type {boolean}
   * @memberof SubscriptionCollection
   */
  hasMore?: boolean;
  /**
   *
   * @type {object}
   * @memberof SubscriptionCollection
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof SubscriptionCollection
   */
  object?: string;
  /**
   *
   * @type {RequestOptions}
   * @memberof SubscriptionCollection
   */
  _requestOptions?: RequestOptions;
  /**
   *
   * @type {object}
   * @memberof SubscriptionCollection
   */
  requestParams?: object;
  /**
   *
   * @type {number}
   * @memberof SubscriptionCollection
   */
  totalCount?: number;
  /**
   *
   * @type {string}
   * @memberof SubscriptionCollection
   */
  url?: string;
}
/**
 *
 * @export
 * @interface SubscriptionItem
 */
export interface SubscriptionItem {
  /**
   *
   * @type {BillingThresholds}
   * @memberof SubscriptionItem
   */
  billingThresholds?: BillingThresholds;
  /**
   *
   * @type {number}
   * @memberof SubscriptionItem
   */
  created?: number;
  /**
   *
   * @type {boolean}
   * @memberof SubscriptionItem
   */
  deleted?: boolean;
  /**
   *
   * @type {string}
   * @memberof SubscriptionItem
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof SubscriptionItem
   */
  lastResponse?: object;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof SubscriptionItem
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof SubscriptionItem
   */
  object?: string;
  /**
   *
   * @type {Plan}
   * @memberof SubscriptionItem
   */
  plan?: Plan;
  /**
   *
   * @type {number}
   * @memberof SubscriptionItem
   */
  quantity?: number;
  /**
   *
   * @type {string}
   * @memberof SubscriptionItem
   */
  subscription?: string;
  /**
   *
   * @type {Array<TaxRate>}
   * @memberof SubscriptionItem
   */
  taxRates?: TaxRate[];
}
/**
 *
 * @export
 * @interface SubscriptionItemCollection
 */
export interface SubscriptionItemCollection {
  /**
   *
   * @type {number}
   * @memberof SubscriptionItemCollection
   */
  count?: number;
  /**
   *
   * @type {Array<SubscriptionItem>}
   * @memberof SubscriptionItemCollection
   */
  data?: SubscriptionItem[];
  /**
   *
   * @type {boolean}
   * @memberof SubscriptionItemCollection
   */
  hasMore?: boolean;
  /**
   *
   * @type {object}
   * @memberof SubscriptionItemCollection
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof SubscriptionItemCollection
   */
  object?: string;
  /**
   *
   * @type {RequestOptions}
   * @memberof SubscriptionItemCollection
   */
  _requestOptions?: RequestOptions;
  /**
   *
   * @type {object}
   * @memberof SubscriptionItemCollection
   */
  requestParams?: object;
  /**
   *
   * @type {number}
   * @memberof SubscriptionItemCollection
   */
  totalCount?: number;
  /**
   *
   * @type {string}
   * @memberof SubscriptionItemCollection
   */
  url?: string;
}
/**
 *
 * @export
 * @interface TaxAmount
 */
export interface TaxAmount {
  /**
   *
   * @type {number}
   * @memberof TaxAmount
   */
  amount?: number;
  /**
   *
   * @type {boolean}
   * @memberof TaxAmount
   */
  inclusive?: boolean;
  /**
   *
   * @type {object}
   * @memberof TaxAmount
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof TaxAmount
   */
  taxRate?: string;
  /**
   *
   * @type {TaxRate}
   * @memberof TaxAmount
   */
  taxRateObject?: TaxRate;
}
/**
 *
 * @export
 * @interface TaxId
 */
export interface TaxId {
  /**
   *
   * @type {string}
   * @memberof TaxId
   */
  country?: string;
  /**
   *
   * @type {number}
   * @memberof TaxId
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof TaxId
   */
  customer?: string;
  /**
   *
   * @type {Customer}
   * @memberof TaxId
   */
  customerObject?: Customer;
  /**
   *
   * @type {boolean}
   * @memberof TaxId
   */
  deleted?: boolean;
  /**
   *
   * @type {string}
   * @memberof TaxId
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof TaxId
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof TaxId
   */
  livemode?: boolean;
  /**
   *
   * @type {string}
   * @memberof TaxId
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof TaxId
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof TaxId
   */
  value?: string;
  /**
   *
   * @type {Verification}
   * @memberof TaxId
   */
  verification?: Verification;
}
/**
 *
 * @export
 * @interface TaxIdCollection
 */
export interface TaxIdCollection {
  /**
   *
   * @type {number}
   * @memberof TaxIdCollection
   */
  count?: number;
  /**
   *
   * @type {Array<TaxId>}
   * @memberof TaxIdCollection
   */
  data?: TaxId[];
  /**
   *
   * @type {boolean}
   * @memberof TaxIdCollection
   */
  hasMore?: boolean;
  /**
   *
   * @type {object}
   * @memberof TaxIdCollection
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof TaxIdCollection
   */
  object?: string;
  /**
   *
   * @type {RequestOptions}
   * @memberof TaxIdCollection
   */
  _requestOptions?: RequestOptions;
  /**
   *
   * @type {object}
   * @memberof TaxIdCollection
   */
  requestParams?: object;
  /**
   *
   * @type {number}
   * @memberof TaxIdCollection
   */
  totalCount?: number;
  /**
   *
   * @type {string}
   * @memberof TaxIdCollection
   */
  url?: string;
}
/**
 *
 * @export
 * @interface TaxInfo
 */
export interface TaxInfo {
  /**
   *
   * @type {object}
   * @memberof TaxInfo
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof TaxInfo
   */
  taxId?: string;
  /**
   *
   * @type {string}
   * @memberof TaxInfo
   */
  type?: string;
}
/**
 *
 * @export
 * @interface TaxInfoVerification
 */
export interface TaxInfoVerification {
  /**
   *
   * @type {object}
   * @memberof TaxInfoVerification
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof TaxInfoVerification
   */
  status?: string;
  /**
   *
   * @type {string}
   * @memberof TaxInfoVerification
   */
  verifiedName?: string;
}
/**
 *
 * @export
 * @interface TaxRate
 */
export interface TaxRate {
  /**
   *
   * @type {boolean}
   * @memberof TaxRate
   */
  active?: boolean;
  /**
   *
   * @type {number}
   * @memberof TaxRate
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof TaxRate
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof TaxRate
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof TaxRate
   */
  id?: string;
  /**
   *
   * @type {boolean}
   * @memberof TaxRate
   */
  inclusive?: boolean;
  /**
   *
   * @type {string}
   * @memberof TaxRate
   */
  jurisdiction?: string;
  /**
   *
   * @type {object}
   * @memberof TaxRate
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof TaxRate
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof TaxRate
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof TaxRate
   */
  object?: string;
  /**
   *
   * @type {number}
   * @memberof TaxRate
   */
  percentage?: number;
}
/**
 *
 * @export
 * @interface ThreeDSecure
 */
export interface ThreeDSecure {
  /**
   *
   * @type {boolean}
   * @memberof ThreeDSecure
   */
  authenticated?: boolean;
  /**
   *
   * @type {object}
   * @memberof ThreeDSecure
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof ThreeDSecure
   */
  succeeded?: boolean;
  /**
   *
   * @type {string}
   * @memberof ThreeDSecure
   */
  version?: string;
}
/**
 *
 * @export
 * @interface ThreeDSecureUsage
 */
export interface ThreeDSecureUsage {
  /**
   *
   * @type {object}
   * @memberof ThreeDSecureUsage
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof ThreeDSecureUsage
   */
  supported?: boolean;
}
/**
 *
 * @export
 * @interface ThresholdItemReason
 */
export interface ThresholdItemReason {
  /**
   *
   * @type {object}
   * @memberof ThresholdItemReason
   */
  lastResponse?: object;
  /**
   *
   * @type {Array<string>}
   * @memberof ThresholdItemReason
   */
  lineItemIds?: string[];
  /**
   *
   * @type {number}
   * @memberof ThresholdItemReason
   */
  usageGte?: number;
}
/**
 *
 * @export
 * @interface ThresholdReason
 */
export interface ThresholdReason {
  /**
   *
   * @type {number}
   * @memberof ThresholdReason
   */
  amountGte?: number;
  /**
   *
   * @type {Array<ThresholdItemReason>}
   * @memberof ThresholdReason
   */
  itemReasons?: ThresholdItemReason[];
  /**
   *
   * @type {object}
   * @memberof ThresholdReason
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface Tier
 */
export interface Tier {
  /**
   *
   * @type {number}
   * @memberof Tier
   */
  flatAmount?: number;
  /**
   *
   * @type {object}
   * @memberof Tier
   */
  lastResponse?: object;
  /**
   *
   * @type {number}
   * @memberof Tier
   */
  unitAmount?: number;
  /**
   *
   * @type {number}
   * @memberof Tier
   */
  upTo?: number;
}
/**
 *
 * @export
 * @interface TosAcceptance
 */
export interface TosAcceptance {
  /**
   *
   * @type {number}
   * @memberof TosAcceptance
   */
  date?: number;
  /**
   *
   * @type {string}
   * @memberof TosAcceptance
   */
  ip?: string;
  /**
   *
   * @type {object}
   * @memberof TosAcceptance
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof TosAcceptance
   */
  userAgent?: string;
}
/**
 *
 * @export
 * @interface Transfer
 */
export interface Transfer {
  /**
   *
   * @type {number}
   * @memberof Transfer
   */
  amount?: number;
  /**
   *
   * @type {number}
   * @memberof Transfer
   */
  amountReversed?: number;
  /**
   *
   * @type {string}
   * @memberof Transfer
   */
  balanceTransaction?: string;
  /**
   *
   * @type {BalanceTransaction}
   * @memberof Transfer
   */
  balanceTransactionObject?: BalanceTransaction;
  /**
   *
   * @type {number}
   * @memberof Transfer
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof Transfer
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof Transfer
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Transfer
   */
  destination?: string;
  /**
   *
   * @type {Account}
   * @memberof Transfer
   */
  destinationObject?: Account;
  /**
   *
   * @type {string}
   * @memberof Transfer
   */
  destinationPayment?: string;
  /**
   *
   * @type {Charge}
   * @memberof Transfer
   */
  destinationPaymentObject?: Charge;
  /**
   *
   * @type {string}
   * @memberof Transfer
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof Transfer
   */
  lastResponse?: object;
  /**
   *
   * @type {boolean}
   * @memberof Transfer
   */
  livemode?: boolean;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Transfer
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Transfer
   */
  object?: string;
  /**
   *
   * @type {TransferReversalCollection}
   * @memberof Transfer
   */
  reversals?: TransferReversalCollection;
  /**
   *
   * @type {boolean}
   * @memberof Transfer
   */
  reversed?: boolean;
  /**
   *
   * @type {string}
   * @memberof Transfer
   */
  sourceTransaction?: string;
  /**
   *
   * @type {Charge}
   * @memberof Transfer
   */
  sourceTransactionObject?: Charge;
  /**
   *
   * @type {string}
   * @memberof Transfer
   */
  sourceType?: string;
  /**
   *
   * @type {string}
   * @memberof Transfer
   */
  transferGroup?: string;
}
/**
 *
 * @export
 * @interface TransferData
 */
export interface TransferData {
  /**
   *
   * @type {number}
   * @memberof TransferData
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof TransferData
   */
  destination?: string;
  /**
   *
   * @type {Account}
   * @memberof TransferData
   */
  destinationObject?: Account;
  /**
   *
   * @type {object}
   * @memberof TransferData
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface TransferReversal
 */
export interface TransferReversal {
  /**
   *
   * @type {number}
   * @memberof TransferReversal
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof TransferReversal
   */
  balanceTransaction?: string;
  /**
   *
   * @type {BalanceTransaction}
   * @memberof TransferReversal
   */
  balanceTransactionObject?: BalanceTransaction;
  /**
   *
   * @type {number}
   * @memberof TransferReversal
   */
  created?: number;
  /**
   *
   * @type {string}
   * @memberof TransferReversal
   */
  currency?: string;
  /**
   *
   * @type {string}
   * @memberof TransferReversal
   */
  destinationPaymentRefund?: string;
  /**
   *
   * @type {Refund}
   * @memberof TransferReversal
   */
  destinationPaymentRefundObject?: Refund;
  /**
   *
   * @type {string}
   * @memberof TransferReversal
   */
  id?: string;
  /**
   *
   * @type {object}
   * @memberof TransferReversal
   */
  lastResponse?: object;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof TransferReversal
   */
  metadata?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof TransferReversal
   */
  object?: string;
  /**
   *
   * @type {string}
   * @memberof TransferReversal
   */
  sourceRefund?: string;
  /**
   *
   * @type {Refund}
   * @memberof TransferReversal
   */
  sourceRefundObject?: Refund;
  /**
   *
   * @type {string}
   * @memberof TransferReversal
   */
  transfer?: string;
  /**
   *
   * @type {Transfer}
   * @memberof TransferReversal
   */
  transferObject?: Transfer;
}
/**
 *
 * @export
 * @interface TransferReversalCollection
 */
export interface TransferReversalCollection {
  /**
   *
   * @type {number}
   * @memberof TransferReversalCollection
   */
  count?: number;
  /**
   *
   * @type {Array<TransferReversal>}
   * @memberof TransferReversalCollection
   */
  data?: TransferReversal[];
  /**
   *
   * @type {boolean}
   * @memberof TransferReversalCollection
   */
  hasMore?: boolean;
  /**
   *
   * @type {object}
   * @memberof TransferReversalCollection
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof TransferReversalCollection
   */
  object?: string;
  /**
   *
   * @type {RequestOptions}
   * @memberof TransferReversalCollection
   */
  _requestOptions?: RequestOptions;
  /**
   *
   * @type {object}
   * @memberof TransferReversalCollection
   */
  requestParams?: object;
  /**
   *
   * @type {number}
   * @memberof TransferReversalCollection
   */
  totalCount?: number;
  /**
   *
   * @type {string}
   * @memberof TransferReversalCollection
   */
  url?: string;
}
/**
 *
 * @export
 * @interface TransformUsage
 */
export interface TransformUsage {
  /**
   *
   * @type {number}
   * @memberof TransformUsage
   */
  divideBy?: number;
  /**
   *
   * @type {object}
   * @memberof TransformUsage
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof TransformUsage
   */
  round?: string;
}
/**
 *
 * @export
 * @interface UpdateProfileImageModel
 */
export interface UpdateProfileImageModel {
  /**
   *
   * @type {string}
   * @memberof UpdateProfileImageModel
   */
  base64EncodedImage?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateProfileImageModel
   */
  contentType?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateProfileImageModel
   */
  profileImageUrl?: string;
}
/**
 *
 * @export
 * @interface UserProfileModel
 */
export interface UserProfileModel {
  /**
   *
   * @type {string}
   * @memberof UserProfileModel
   */
  bio?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof UserProfileModel
   */
  firstName?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof UserProfileModel
   */
  lastName?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof UserProfileModel
   */
  profileImageUrl?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof UserProfileModel
   */
  userProfileId?: string;
  /**
   * READ ONLY
   * @type {string}
   * @memberof UserProfileModel
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof UserProfileModel
   */
  websiteUrl?: string;
}
/**
 *
 * @export
 * @interface UserRelationshipModel
 */
export interface UserRelationshipModel {
  /**
   *
   * @type {boolean}
   * @memberof UserRelationshipModel
   */
  blocked?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserRelationshipModel
   */
  followedBy?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserRelationshipModel
   */
  following?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserRelationshipModel
   */
  notificationsEnabled?: boolean;
}
/**
 *
 * @export
 * @interface Verification
 */
export interface Verification {
  /**
   *
   * @type {object}
   * @memberof Verification
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof Verification
   */
  status?: string;
  /**
   *
   * @type {string}
   * @memberof Verification
   */
  verifiedAddress?: string;
  /**
   *
   * @type {string}
   * @memberof Verification
   */
  verifiedName?: string;
}
/**
 *
 * @export
 * @interface VerificationDocument
 */
export interface VerificationDocument {
  /**
   *
   * @type {string}
   * @memberof VerificationDocument
   */
  back?: string;
  /**
   *
   * @type {any}
   * @memberof VerificationDocument
   */
  backObject?: any;
  /**
   *
   * @type {string}
   * @memberof VerificationDocument
   */
  details?: string;
  /**
   *
   * @type {string}
   * @memberof VerificationDocument
   */
  detailsCode?: string;
  /**
   *
   * @type {string}
   * @memberof VerificationDocument
   */
  front?: string;
  /**
   *
   * @type {any}
   * @memberof VerificationDocument
   */
  frontObject?: any;
  /**
   *
   * @type {object}
   * @memberof VerificationDocument
   */
  lastResponse?: object;
}
/**
 *
 * @export
 * @interface VisaCheckout
 */
export interface VisaCheckout {
  /**
   *
   * @type {Address}
   * @memberof VisaCheckout
   */
  billingAddress?: Address;
  /**
   *
   * @type {string}
   * @memberof VisaCheckout
   */
  email?: string;
  /**
   *
   * @type {object}
   * @memberof VisaCheckout
   */
  lastResponse?: object;
  /**
   *
   * @type {string}
   * @memberof VisaCheckout
   */
  name?: string;
  /**
   *
   * @type {Address}
   * @memberof VisaCheckout
   */
  shippingAddress?: Address;
}
/**
 *
 * @export
 * @interface Wallet
 */
export interface Wallet {
  /**
   *
   * @type {AmexExpressCheckout}
   * @memberof Wallet
   */
  amexExpressCheckout?: AmexExpressCheckout;
  /**
   *
   * @type {ApplePay}
   * @memberof Wallet
   */
  applePay?: ApplePay;
  /**
   *
   * @type {string}
   * @memberof Wallet
   */
  dynamicLast4?: string;
  /**
   *
   * @type {GooglePay}
   * @memberof Wallet
   */
  googlePay?: GooglePay;
  /**
   *
   * @type {object}
   * @memberof Wallet
   */
  lastResponse?: object;
  /**
   *
   * @type {Masterpass}
   * @memberof Wallet
   */
  masterpass?: Masterpass;
  /**
   *
   * @type {SamsungPay}
   * @memberof Wallet
   */
  samsungPay?: SamsungPay;
  /**
   *
   * @type {string}
   * @memberof Wallet
   */
  type?: string;
  /**
   *
   * @type {VisaCheckout}
   * @memberof Wallet
   */
  visaCheckout?: VisaCheckout;
}
/**
 *
 * @export
 * @interface Wechat
 */
export interface Wechat {
  /**
   *
   * @type {object}
   * @memberof Wechat
   */
  lastResponse?: object;
}

/**
 * EventControllerApi - axios parameter creator
 * @export
 */
export const EventControllerApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary createEvent
     * @param {EventDetailModel} eventDetailModel eventDetailModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventUsingPUT(
      eventDetailModel: EventDetailModel,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'eventDetailModel' is not null or undefined
      if (eventDetailModel === null || eventDetailModel === undefined) {
        throw new RequiredError(
          "eventDetailModel",
          "Required parameter eventDetailModel was null or undefined when calling createEventUsingPUT."
        );
      }
      const localVarPath = `/events/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };
      const needsSerialization =
        <any>"EventDetailModel" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(eventDetailModel !== undefined ? eventDetailModel : {})
        : eventDetailModel || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getEventDetails
     * @param {string} eventId eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventDetailsUsingGET(eventId: string, options: any = {}): RequestArgs {
      // verify required parameter 'eventId' is not null or undefined
      if (eventId === null || eventId === undefined) {
        throw new RequiredError(
          "eventId",
          "Required parameter eventId was null or undefined when calling getEventDetailsUsingGET."
        );
      }
      const localVarPath = `/events/{eventId}/details`.replace(
        `{${"eventId"}}`,
        encodeURIComponent(String(eventId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getEvent
     * @param {string} eventId eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventUsingGET(eventId: string, options: any = {}): RequestArgs {
      // verify required parameter 'eventId' is not null or undefined
      if (eventId === null || eventId === undefined) {
        throw new RequiredError(
          "eventId",
          "Required parameter eventId was null or undefined when calling getEventUsingGET."
        );
      }
      const localVarPath = `/events/{eventId}`.replace(
        `{${"eventId"}}`,
        encodeURIComponent(String(eventId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getFavoriteEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavoriteEventsUsingGET(
      limit: number,
      offset: number,
      userProfileId: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling getFavoriteEventsUsingGET."
        );
      }
      // verify required parameter 'offset' is not null or undefined
      if (offset === null || offset === undefined) {
        throw new RequiredError(
          "offset",
          "Required parameter offset was null or undefined when calling getFavoriteEventsUsingGET."
        );
      }
      // verify required parameter 'userProfileId' is not null or undefined
      if (userProfileId === null || userProfileId === undefined) {
        throw new RequiredError(
          "userProfileId",
          "Required parameter userProfileId was null or undefined when calling getFavoriteEventsUsingGET."
        );
      }
      const localVarPath = `/users/{userProfileId}/events/favorites`.replace(
        `{${"userProfileId"}}`,
        encodeURIComponent(userProfileId)
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getHostedEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHostedEventsUsingGET(
      limit: number,
      offset: number,
      userProfileId: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling getHostedEventsUsingGET."
        );
      }
      // verify required parameter 'offset' is not null or undefined
      if (offset === null || offset === undefined) {
        throw new RequiredError(
          "offset",
          "Required parameter offset was null or undefined when calling getHostedEventsUsingGET."
        );
      }
      // verify required parameter 'userProfileId' is not null or undefined
      if (userProfileId === null || userProfileId === undefined) {
        throw new RequiredError(
          "userProfileId",
          "Required parameter userProfileId was null or undefined when calling getHostedEventsUsingGET."
        );
      }
      const localVarPath = `/users/{userProfileId}/events/hosted`.replace(
        `{${"userProfileId"}}`,
        encodeURIComponent(String(userProfileId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getPastEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPastEventsUsingGET(
      limit: number,
      offset: number,
      userProfileId: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling getPastEventsUsingGET."
        );
      }
      // verify required parameter 'offset' is not null or undefined
      if (offset === null || offset === undefined) {
        throw new RequiredError(
          "offset",
          "Required parameter offset was null or undefined when calling getPastEventsUsingGET."
        );
      }
      // verify required parameter 'userProfileId' is not null or undefined
      if (userProfileId === null || userProfileId === undefined) {
        throw new RequiredError(
          "userProfileId",
          "Required parameter userProfileId was null or undefined when calling getPastEventsUsingGET."
        );
      }
      const localVarPath = `/users/{userProfileId}/events/history`.replace(
        `{${"userProfileId"}}`,
        encodeURIComponent(String(userProfileId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * EventControllerApi - functional programming interface
 * @export
 */
export const EventControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary createEvent
     * @param {EventDetailModel} eventDetailModel eventDetailModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventUsingPUT(
      eventDetailModel: EventDetailModel,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelEventDetailModel> {
      const localVarAxiosArgs = EventControllerApiAxiosParamCreator(
        configuration
      ).createEventUsingPUT(eventDetailModel, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getEventDetails
     * @param {string} eventId eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventDetailsUsingGET(
      eventId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelEventDetailModel> {
      const localVarAxiosArgs = EventControllerApiAxiosParamCreator(
        configuration
      ).getEventDetailsUsingGET(eventId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getEvent
     * @param {string} eventId eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventUsingGET(
      eventId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelEventModel> {
      const localVarAxiosArgs = EventControllerApiAxiosParamCreator(
        configuration
      ).getEventUsingGET(eventId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getFavoriteEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavoriteEventsUsingGET(
      limit: number,
      offset: number,
      userProfileId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelEventModel> {
      const localVarAxiosArgs = EventControllerApiAxiosParamCreator(
        configuration
      ).getFavoriteEventsUsingGET(limit, offset, userProfileId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getHostedEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHostedEventsUsingGET(
      limit: number,
      offset: number,
      userProfileId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelEventModel> {
      const localVarAxiosArgs = EventControllerApiAxiosParamCreator(
        configuration
      ).getHostedEventsUsingGET(limit, offset, userProfileId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getPastEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPastEventsUsingGET(
      limit: number,
      offset: number,
      userProfileId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelEventModel> {
      const localVarAxiosArgs = EventControllerApiAxiosParamCreator(
        configuration
      ).getPastEventsUsingGET(limit, offset, userProfileId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }
  };
};

/**
 * EventControllerApi - factory interface
 * @export
 */
export const EventControllerApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary createEvent
     * @param {EventDetailModel} eventDetailModel eventDetailModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventUsingPUT(eventDetailModel: EventDetailModel, options?: any) {
      return EventControllerApiFp(configuration).createEventUsingPUT(
        eventDetailModel,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getEventDetails
     * @param {string} eventId eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventDetailsUsingGET(eventId: string, options?: any) {
      return EventControllerApiFp(configuration).getEventDetailsUsingGET(
        eventId,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getEvent
     * @param {string} eventId eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventUsingGET(eventId: string, options?: any) {
      return EventControllerApiFp(configuration).getEventUsingGET(
        eventId,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getFavoriteEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavoriteEventsUsingGET(
      limit: number,
      offset: number,
      userProfileId: string,
      options?: any
    ) {
      return EventControllerApiFp(configuration).getFavoriteEventsUsingGET(
        limit,
        offset,
        userProfileId,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getHostedEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHostedEventsUsingGET(
      limit: number,
      offset: number,
      userProfileId: string,
      options?: any
    ) {
      return EventControllerApiFp(configuration).getHostedEventsUsingGET(
        limit,
        offset,
        userProfileId,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getPastEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPastEventsUsingGET(
      limit: number,
      offset: number,
      userProfileId: string,
      options?: any
    ) {
      return EventControllerApiFp(configuration).getPastEventsUsingGET(
        limit,
        offset,
        userProfileId,
        options
      )(axios, basePath);
    }
  };
};

/**
 * EventControllerApi - object-oriented interface
 * @export
 * @class EventControllerApi
 * @extends {BaseAPI}
 */
export class EventControllerApi extends BaseAPI {
  /**
   *
   * @summary createEvent
   * @param {EventDetailModel} eventDetailModel eventDetailModel
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventControllerApi
   */
  public createEventUsingPUT(
    eventDetailModel: EventDetailModel,
    options?: any
  ) {
    return EventControllerApiFp(this.configuration).createEventUsingPUT(
      eventDetailModel,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getEventDetails
   * @param {string} eventId eventId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventControllerApi
   */
  public getEventDetailsUsingGET(eventId: string, options?: any) {
    return EventControllerApiFp(this.configuration).getEventDetailsUsingGET(
      eventId,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getEvent
   * @param {string} eventId eventId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventControllerApi
   */
  public getEventUsingGET(eventId: string, options?: any) {
    return EventControllerApiFp(this.configuration).getEventUsingGET(
      eventId,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getFavoriteEvents
   * @param {number} limit limit
   * @param {number} offset offset
   * @param {string} userProfileId userProfileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventControllerApi
   */
  public getFavoriteEventsUsingGET(
    limit: number,
    offset: number,
    userProfileId: string,
    options?: any
  ) {
    return EventControllerApiFp(this.configuration).getFavoriteEventsUsingGET(
      limit,
      offset,
      userProfileId,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getHostedEvents
   * @param {number} limit limit
   * @param {number} offset offset
   * @param {string} userProfileId userProfileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventControllerApi
   */
  public getHostedEventsUsingGET(
    limit: number,
    offset: number,
    userProfileId: string,
    options?: any
  ) {
    return EventControllerApiFp(this.configuration).getHostedEventsUsingGET(
      limit,
      offset,
      userProfileId,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getPastEvents
   * @param {number} limit limit
   * @param {number} offset offset
   * @param {string} userProfileId userProfileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventControllerApi
   */
  public getPastEventsUsingGET(
    limit: number,
    offset: number,
    userProfileId: string,
    options?: any
  ) {
    return EventControllerApiFp(this.configuration).getPastEventsUsingGET(
      limit,
      offset,
      userProfileId,
      options
    )(this.axios, this.basePath);
  }
}

/**
 * MeControllerApi - axios parameter creator
 * @export
 */
export const MeControllerApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary createBlock
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBlockUsingPUT(
      otherUserProfileId: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'otherUserProfileId' is not null or undefined
      if (otherUserProfileId === null || otherUserProfileId === undefined) {
        throw new RequiredError(
          "otherUserProfileId",
          "Required parameter otherUserProfileId was null or undefined when calling createBlockUsingPUT."
        );
      }
      const localVarPath = `/me/block/{otherUserProfileId}`.replace(
        `{${"otherUserProfileId"}}`,
        encodeURIComponent(String(otherUserProfileId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary createFavorite
     * @param {string} eventId eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFavoriteUsingPUT(eventId: string, options: any = {}): RequestArgs {
      // verify required parameter 'eventId' is not null or undefined
      if (eventId === null || eventId === undefined) {
        throw new RequiredError(
          "eventId",
          "Required parameter eventId was null or undefined when calling createFavoriteUsingPUT."
        );
      }
      const localVarPath = `/me/events/{eventId}/favorite`.replace(
        `{${"eventId"}}`,
        encodeURIComponent(String(eventId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary createFollower
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFollowerUsingPUT(
      otherUserProfileId: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'otherUserProfileId' is not null or undefined
      if (otherUserProfileId === null || otherUserProfileId === undefined) {
        throw new RequiredError(
          "otherUserProfileId",
          "Required parameter otherUserProfileId was null or undefined when calling createFollowerUsingPUT."
        );
      }
      const localVarPath = `/me/follow/{otherUserProfileId}`.replace(
        `{${"otherUserProfileId"}}`,
        encodeURIComponent(String(otherUserProfileId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary createUserProfile
     * @param {FullUserProfileModel} fullUserProfileModel fullUserProfileModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserProfileUsingPOST(
      fullUserProfileModel: FullUserProfileModel,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'fullUserProfileModel' is not null or undefined
      if (fullUserProfileModel === null || fullUserProfileModel === undefined) {
        throw new RequiredError(
          "fullUserProfileModel",
          "Required parameter fullUserProfileModel was null or undefined when calling createUserProfileUsingPOST."
        );
      }
      const localVarPath = `/me/profile`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };
      const needsSerialization =
        <any>"FullUserProfileModel" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            fullUserProfileModel !== undefined ? fullUserProfileModel : {}
          )
        : fullUserProfileModel || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getBlockedUsers
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockedUsersUsingGET(
      limit: number,
      offset: number,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling getBlockedUsersUsingGET."
        );
      }
      // verify required parameter 'offset' is not null or undefined
      if (offset === null || offset === undefined) {
        throw new RequiredError(
          "offset",
          "Required parameter offset was null or undefined when calling getBlockedUsersUsingGET."
        );
      }
      const localVarPath = `/me/blocks`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getFavoriteEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavoriteEventsUsingGET1(
      limit: number,
      offset: number,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling getFavoriteEventsUsingGET1."
        );
      }
      // verify required parameter 'offset' is not null or undefined
      if (offset === null || offset === undefined) {
        throw new RequiredError(
          "offset",
          "Required parameter offset was null or undefined when calling getFavoriteEventsUsingGET1."
        );
      }
      const localVarPath = `/me/events/favorites`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getFollowers
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowersUsingGET(
      limit: number,
      offset: number,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling getFollowersUsingGET."
        );
      }
      // verify required parameter 'offset' is not null or undefined
      if (offset === null || offset === undefined) {
        throw new RequiredError(
          "offset",
          "Required parameter offset was null or undefined when calling getFollowersUsingGET."
        );
      }
      const localVarPath = `/me/followed-by`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getFollowing
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowingUsingGET(
      limit: number,
      offset: number,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling getFollowingUsingGET."
        );
      }
      // verify required parameter 'offset' is not null or undefined
      if (offset === null || offset === undefined) {
        throw new RequiredError(
          "offset",
          "Required parameter offset was null or undefined when calling getFollowingUsingGET."
        );
      }
      const localVarPath = `/me/follows`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getHostedEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHostedEventsUsingGET1(
      limit: number,
      offset: number,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling getHostedEventsUsingGET1."
        );
      }
      // verify required parameter 'offset' is not null or undefined
      if (offset === null || offset === undefined) {
        throw new RequiredError(
          "offset",
          "Required parameter offset was null or undefined when calling getHostedEventsUsingGET1."
        );
      }
      const localVarPath = `/me/events/hosted`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getPastEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPastEventsUsingGET1(
      limit: number,
      offset: number,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling getPastEventsUsingGET1."
        );
      }
      // verify required parameter 'offset' is not null or undefined
      if (offset === null || offset === undefined) {
        throw new RequiredError(
          "offset",
          "Required parameter offset was null or undefined when calling getPastEventsUsingGET1."
        );
      }
      const localVarPath = `/me/events/history`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getRelationship
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationshipUsingGET(
      otherUserProfileId: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'otherUserProfileId' is not null or undefined
      if (otherUserProfileId === null || otherUserProfileId === undefined) {
        throw new RequiredError(
          "otherUserProfileId",
          "Required parameter otherUserProfileId was null or undefined when calling getRelationshipUsingGET."
        );
      }
      const localVarPath = `/me/relationship/{otherUserProfileId}`.replace(
        `{${"otherUserProfileId"}}`,
        encodeURIComponent(String(otherUserProfileId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getSuggestedUsers
     * @param {number} limit limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSuggestedUsersUsingGET(limit: number, options: any = {}): RequestArgs {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling getSuggestedUsersUsingGET."
        );
      }
      const localVarPath = `/me/users/suggested`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getUserProfile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProfileUsingGET(options: any = {}): RequestArgs {
      const localVarPath = `/me/profile`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary removeBlock
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeBlockUsingDELETE(
      otherUserProfileId: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'otherUserProfileId' is not null or undefined
      if (otherUserProfileId === null || otherUserProfileId === undefined) {
        throw new RequiredError(
          "otherUserProfileId",
          "Required parameter otherUserProfileId was null or undefined when calling removeBlockUsingDELETE."
        );
      }
      const localVarPath = `/me/block/{otherUserProfileId}`.replace(
        `{${"otherUserProfileId"}}`,
        encodeURIComponent(String(otherUserProfileId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary removeFavorite
     * @param {string} eventId eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFavoriteUsingDELETE(eventId: string, options: any = {}): RequestArgs {
      // verify required parameter 'eventId' is not null or undefined
      if (eventId === null || eventId === undefined) {
        throw new RequiredError(
          "eventId",
          "Required parameter eventId was null or undefined when calling removeFavoriteUsingDELETE."
        );
      }
      const localVarPath = `/me/events/{eventId}/favorite`.replace(
        `{${"eventId"}}`,
        encodeURIComponent(String(eventId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary removeFollower
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFollowerUsingDELETE(
      otherUserProfileId: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'otherUserProfileId' is not null or undefined
      if (otherUserProfileId === null || otherUserProfileId === undefined) {
        throw new RequiredError(
          "otherUserProfileId",
          "Required parameter otherUserProfileId was null or undefined when calling removeFollowerUsingDELETE."
        );
      }
      const localVarPath = `/me/follow/{otherUserProfileId}`.replace(
        `{${"otherUserProfileId"}}`,
        encodeURIComponent(String(otherUserProfileId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary toggleNotification
     * @param {boolean} enabled enabled
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toggleNotificationUsingPUT(
      enabled: boolean,
      otherUserProfileId: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'enabled' is not null or undefined
      if (enabled === null || enabled === undefined) {
        throw new RequiredError(
          "enabled",
          "Required parameter enabled was null or undefined when calling toggleNotificationUsingPUT."
        );
      }
      // verify required parameter 'otherUserProfileId' is not null or undefined
      if (otherUserProfileId === null || otherUserProfileId === undefined) {
        throw new RequiredError(
          "otherUserProfileId",
          "Required parameter otherUserProfileId was null or undefined when calling toggleNotificationUsingPUT."
        );
      }
      const localVarPath = `/me/notifications/{otherUserProfileId}`.replace(
        `{${"otherUserProfileId"}}`,
        encodeURIComponent(String(otherUserProfileId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (enabled !== undefined) {
        localVarQueryParameter["enabled"] = enabled;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary updateProfileImage
     * @param {UpdateProfileImageModel} updateProfileImageModel updateProfileImageModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfileImageUsingPOST(
      updateProfileImageModel: UpdateProfileImageModel,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'updateProfileImageModel' is not null or undefined
      if (
        updateProfileImageModel === null ||
        updateProfileImageModel === undefined
      ) {
        throw new RequiredError(
          "updateProfileImageModel",
          "Required parameter updateProfileImageModel was null or undefined when calling updateProfileImageUsingPOST."
        );
      }
      const localVarPath = `/me/profile-image`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };
      const needsSerialization =
        <any>"UpdateProfileImageModel" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            updateProfileImageModel !== undefined ? updateProfileImageModel : {}
          )
        : updateProfileImageModel || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary updateUserProfile
     * @param {FullUserProfileModel} fullUserProfileModel fullUserProfileModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserProfileUsingPUT(
      fullUserProfileModel: FullUserProfileModel,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'fullUserProfileModel' is not null or undefined
      if (fullUserProfileModel === null || fullUserProfileModel === undefined) {
        throw new RequiredError(
          "fullUserProfileModel",
          "Required parameter fullUserProfileModel was null or undefined when calling updateUserProfileUsingPUT."
        );
      }
      const localVarPath = `/me/profile`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };
      const needsSerialization =
        <any>"FullUserProfileModel" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            fullUserProfileModel !== undefined ? fullUserProfileModel : {}
          )
        : fullUserProfileModel || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * MeControllerApi - functional programming interface
 * @export
 */
export const MeControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary createBlock
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBlockUsingPUT(
      otherUserProfileId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelobject> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).createBlockUsingPUT(otherUserProfileId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary createFavorite
     * @param {string} eventId eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFavoriteUsingPUT(
      eventId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelobject> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).createFavoriteUsingPUT(eventId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary createFollower
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFollowerUsingPUT(
      otherUserProfileId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelobject> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).createFollowerUsingPUT(otherUserProfileId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary createUserProfile
     * @param {FullUserProfileModel} fullUserProfileModel fullUserProfileModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserProfileUsingPOST(
      fullUserProfileModel: FullUserProfileModel,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelFullUserProfileModel> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).createUserProfileUsingPOST(fullUserProfileModel, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getBlockedUsers
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockedUsersUsingGET(
      limit: number,
      offset: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelstring> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).getBlockedUsersUsingGET(limit, offset, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getFavoriteEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavoriteEventsUsingGET1(
      limit: number,
      offset: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelEventModel> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).getFavoriteEventsUsingGET1(limit, offset, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getFollowers
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowersUsingGET(
      limit: number,
      offset: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelstring> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).getFollowersUsingGET(limit, offset, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getFollowing
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowingUsingGET(
      limit: number,
      offset: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelstring> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).getFollowingUsingGET(limit, offset, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getHostedEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHostedEventsUsingGET1(
      limit: number,
      offset: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelEventModel> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).getHostedEventsUsingGET1(limit, offset, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getPastEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPastEventsUsingGET1(
      limit: number,
      offset: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelEventModel> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).getPastEventsUsingGET1(limit, offset, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getRelationship
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationshipUsingGET(
      otherUserProfileId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelUserRelationshipModel> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).getRelationshipUsingGET(otherUserProfileId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getSuggestedUsers
     * @param {number} limit limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSuggestedUsersUsingGET(
      limit: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelUserProfileModel> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).getSuggestedUsersUsingGET(limit, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getUserProfile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProfileUsingGET(
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelFullUserProfileModel> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).getUserProfileUsingGET(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary removeBlock
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeBlockUsingDELETE(
      otherUserProfileId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelobject> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).removeBlockUsingDELETE(otherUserProfileId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary removeFavorite
     * @param {string} eventId eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFavoriteUsingDELETE(
      eventId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelobject> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).removeFavoriteUsingDELETE(eventId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary removeFollower
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFollowerUsingDELETE(
      otherUserProfileId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelobject> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).removeFollowerUsingDELETE(otherUserProfileId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary toggleNotification
     * @param {boolean} enabled enabled
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toggleNotificationUsingPUT(
      enabled: boolean,
      otherUserProfileId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelobject> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).toggleNotificationUsingPUT(enabled, otherUserProfileId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateProfileImage
     * @param {UpdateProfileImageModel} updateProfileImageModel updateProfileImageModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfileImageUsingPOST(
      updateProfileImageModel: UpdateProfileImageModel,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelUpdateProfileImageModel> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).updateProfileImageUsingPOST(updateProfileImageModel, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateUserProfile
     * @param {FullUserProfileModel} fullUserProfileModel fullUserProfileModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserProfileUsingPUT(
      fullUserProfileModel: FullUserProfileModel,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelFullUserProfileModel> {
      const localVarAxiosArgs = MeControllerApiAxiosParamCreator(
        configuration
      ).updateUserProfileUsingPUT(fullUserProfileModel, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }
  };
};

/**
 * MeControllerApi - factory interface
 * @export
 */
export const MeControllerApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary createBlock
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBlockUsingPUT(otherUserProfileId: string, options?: any) {
      return MeControllerApiFp(configuration).createBlockUsingPUT(
        otherUserProfileId,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary createFavorite
     * @param {string} eventId eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFavoriteUsingPUT(eventId: string, options?: any) {
      return MeControllerApiFp(configuration).createFavoriteUsingPUT(
        eventId,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary createFollower
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFollowerUsingPUT(otherUserProfileId: string, options?: any) {
      return MeControllerApiFp(configuration).createFollowerUsingPUT(
        otherUserProfileId,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary createUserProfile
     * @param {FullUserProfileModel} fullUserProfileModel fullUserProfileModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserProfileUsingPOST(
      fullUserProfileModel: FullUserProfileModel,
      options?: any
    ) {
      return MeControllerApiFp(configuration).createUserProfileUsingPOST(
        fullUserProfileModel,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getBlockedUsers
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockedUsersUsingGET(limit: number, offset: number, options?: any) {
      return MeControllerApiFp(configuration).getBlockedUsersUsingGET(
        limit,
        offset,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getFavoriteEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavoriteEventsUsingGET1(limit: number, offset: number, options?: any) {
      return MeControllerApiFp(configuration).getFavoriteEventsUsingGET1(
        limit,
        offset,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getFollowers
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowersUsingGET(limit: number, offset: number, options?: any) {
      return MeControllerApiFp(configuration).getFollowersUsingGET(
        limit,
        offset,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getFollowing
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowingUsingGET(limit: number, offset: number, options?: any) {
      return MeControllerApiFp(configuration).getFollowingUsingGET(
        limit,
        offset,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getHostedEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHostedEventsUsingGET1(limit: number, offset: number, options?: any) {
      return MeControllerApiFp(configuration).getHostedEventsUsingGET1(
        limit,
        offset,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getPastEvents
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPastEventsUsingGET1(limit: number, offset: number, options?: any) {
      return MeControllerApiFp(configuration).getPastEventsUsingGET1(
        limit,
        offset,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getRelationship
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationshipUsingGET(otherUserProfileId: string, options?: any) {
      return MeControllerApiFp(configuration).getRelationshipUsingGET(
        otherUserProfileId,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getSuggestedUsers
     * @param {number} limit limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSuggestedUsersUsingGET(limit: number, options?: any) {
      return MeControllerApiFp(configuration).getSuggestedUsersUsingGET(
        limit,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getUserProfile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProfileUsingGET(options?: any) {
      return MeControllerApiFp(configuration).getUserProfileUsingGET(options)(
        axios,
        basePath
      );
    },
    /**
     *
     * @summary removeBlock
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeBlockUsingDELETE(otherUserProfileId: string, options?: any) {
      return MeControllerApiFp(configuration).removeBlockUsingDELETE(
        otherUserProfileId,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary removeFavorite
     * @param {string} eventId eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFavoriteUsingDELETE(eventId: string, options?: any) {
      return MeControllerApiFp(configuration).removeFavoriteUsingDELETE(
        eventId,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary removeFollower
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFollowerUsingDELETE(otherUserProfileId: string, options?: any) {
      return MeControllerApiFp(configuration).removeFollowerUsingDELETE(
        otherUserProfileId,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary toggleNotification
     * @param {boolean} enabled enabled
     * @param {string} otherUserProfileId otherUserProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toggleNotificationUsingPUT(
      enabled: boolean,
      otherUserProfileId: string,
      options?: any
    ) {
      return MeControllerApiFp(configuration).toggleNotificationUsingPUT(
        enabled,
        otherUserProfileId,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary updateProfileImage
     * @param {UpdateProfileImageModel} updateProfileImageModel updateProfileImageModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfileImageUsingPOST(
      updateProfileImageModel: UpdateProfileImageModel,
      options?: any
    ) {
      return MeControllerApiFp(configuration).updateProfileImageUsingPOST(
        updateProfileImageModel,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary updateUserProfile
     * @param {FullUserProfileModel} fullUserProfileModel fullUserProfileModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserProfileUsingPUT(
      fullUserProfileModel: FullUserProfileModel,
      options?: any
    ) {
      return MeControllerApiFp(configuration).updateUserProfileUsingPUT(
        fullUserProfileModel,
        options
      )(axios, basePath);
    }
  };
};

/**
 * MeControllerApi - object-oriented interface
 * @export
 * @class MeControllerApi
 * @extends {BaseAPI}
 */
export class MeControllerApi extends BaseAPI {
  /**
   *
   * @summary createBlock
   * @param {string} otherUserProfileId otherUserProfileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public createBlockUsingPUT(otherUserProfileId: string, options?: any) {
    return MeControllerApiFp(this.configuration).createBlockUsingPUT(
      otherUserProfileId,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary createFavorite
   * @param {string} eventId eventId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public createFavoriteUsingPUT(eventId: string, options?: any) {
    return MeControllerApiFp(this.configuration).createFavoriteUsingPUT(
      eventId,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary createFollower
   * @param {string} otherUserProfileId otherUserProfileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public createFollowerUsingPUT(otherUserProfileId: string, options?: any) {
    return MeControllerApiFp(this.configuration).createFollowerUsingPUT(
      otherUserProfileId,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary createUserProfile
   * @param {FullUserProfileModel} fullUserProfileModel fullUserProfileModel
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public createUserProfileUsingPOST(
    fullUserProfileModel: FullUserProfileModel,
    options?: any
  ) {
    return MeControllerApiFp(this.configuration).createUserProfileUsingPOST(
      fullUserProfileModel,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getBlockedUsers
   * @param {number} limit limit
   * @param {number} offset offset
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public getBlockedUsersUsingGET(limit: number, offset: number, options?: any) {
    return MeControllerApiFp(this.configuration).getBlockedUsersUsingGET(
      limit,
      offset,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getFavoriteEvents
   * @param {number} limit limit
   * @param {number} offset offset
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public getFavoriteEventsUsingGET1(
    limit: number,
    offset: number,
    options?: any
  ) {
    return MeControllerApiFp(this.configuration).getFavoriteEventsUsingGET1(
      limit,
      offset,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getFollowers
   * @param {number} limit limit
   * @param {number} offset offset
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public getFollowersUsingGET(limit: number, offset: number, options?: any) {
    return MeControllerApiFp(this.configuration).getFollowersUsingGET(
      limit,
      offset,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getFollowing
   * @param {number} limit limit
   * @param {number} offset offset
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public getFollowingUsingGET(limit: number, offset: number, options?: any) {
    return MeControllerApiFp(this.configuration).getFollowingUsingGET(
      limit,
      offset,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getHostedEvents
   * @param {number} limit limit
   * @param {number} offset offset
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public getHostedEventsUsingGET1(
    limit: number,
    offset: number,
    options?: any
  ) {
    return MeControllerApiFp(this.configuration).getHostedEventsUsingGET1(
      limit,
      offset,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getPastEvents
   * @param {number} limit limit
   * @param {number} offset offset
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public getPastEventsUsingGET1(limit: number, offset: number, options?: any) {
    return MeControllerApiFp(this.configuration).getPastEventsUsingGET1(
      limit,
      offset,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getRelationship
   * @param {string} otherUserProfileId otherUserProfileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public getRelationshipUsingGET(otherUserProfileId: string, options?: any) {
    return MeControllerApiFp(this.configuration).getRelationshipUsingGET(
      otherUserProfileId,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getSuggestedUsers
   * @param {number} limit limit
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public getSuggestedUsersUsingGET(limit: number, options?: any) {
    return MeControllerApiFp(this.configuration).getSuggestedUsersUsingGET(
      limit,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getUserProfile
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public getUserProfileUsingGET(options?: any) {
    return MeControllerApiFp(this.configuration).getUserProfileUsingGET(
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary removeBlock
   * @param {string} otherUserProfileId otherUserProfileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public removeBlockUsingDELETE(otherUserProfileId: string, options?: any) {
    return MeControllerApiFp(this.configuration).removeBlockUsingDELETE(
      otherUserProfileId,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary removeFavorite
   * @param {string} eventId eventId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public removeFavoriteUsingDELETE(eventId: string, options?: any) {
    return MeControllerApiFp(this.configuration).removeFavoriteUsingDELETE(
      eventId,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary removeFollower
   * @param {string} otherUserProfileId otherUserProfileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public removeFollowerUsingDELETE(otherUserProfileId: string, options?: any) {
    return MeControllerApiFp(this.configuration).removeFollowerUsingDELETE(
      otherUserProfileId,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary toggleNotification
   * @param {boolean} enabled enabled
   * @param {string} otherUserProfileId otherUserProfileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public toggleNotificationUsingPUT(
    enabled: boolean,
    otherUserProfileId: string,
    options?: any
  ) {
    return MeControllerApiFp(this.configuration).toggleNotificationUsingPUT(
      enabled,
      otherUserProfileId,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary updateProfileImage
   * @param {UpdateProfileImageModel} updateProfileImageModel updateProfileImageModel
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public updateProfileImageUsingPOST(
    updateProfileImageModel: UpdateProfileImageModel,
    options?: any
  ) {
    return MeControllerApiFp(this.configuration).updateProfileImageUsingPOST(
      updateProfileImageModel,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary updateUserProfile
   * @param {FullUserProfileModel} fullUserProfileModel fullUserProfileModel
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeControllerApi
   */
  public updateUserProfileUsingPUT(
    fullUserProfileModel: FullUserProfileModel,
    options?: any
  ) {
    return MeControllerApiFp(this.configuration).updateUserProfileUsingPUT(
      fullUserProfileModel,
      options
    )(this.axios, this.basePath);
  }
}

/**
 * PaymentControllerApi - axios parameter creator
 * @export
 */
export const PaymentControllerApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary addCardToCustomer
     * @param {string} source source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCardToCustomerUsingPOST(source: string, options: any = {}): RequestArgs {
      // verify required parameter 'source' is not null or undefined
      if (source === null || source === undefined) {
        throw new RequiredError(
          "source",
          "Required parameter source was null or undefined when calling addCardToCustomerUsingPOST."
        );
      }
      const localVarPath = `/payment/customers/me/cards/{source}`.replace(
        `{${"source"}}`,
        encodeURIComponent(String(source))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary changeDefaultCardForCustomer
     * @param {string} source source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeDefaultCardForCustomerUsingPOST(
      source: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'source' is not null or undefined
      if (source === null || source === undefined) {
        throw new RequiredError(
          "source",
          "Required parameter source was null or undefined when calling changeDefaultCardForCustomerUsingPOST."
        );
      }
      const localVarPath = `/payment/customers/me/cards/default/{source}`.replace(
        `{${"source"}}`,
        encodeURIComponent(String(source))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary createCharge
     * @param {ChargeRequestModel} chargeRequestModel chargeRequestModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChargeUsingPUT(
      chargeRequestModel: ChargeRequestModel,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'chargeRequestModel' is not null or undefined
      if (chargeRequestModel === null || chargeRequestModel === undefined) {
        throw new RequiredError(
          "chargeRequestModel",
          "Required parameter chargeRequestModel was null or undefined when calling createChargeUsingPUT."
        );
      }
      const localVarPath = `/payment/charges`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };
      const needsSerialization =
        <any>"ChargeRequestModel" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            chargeRequestModel !== undefined ? chargeRequestModel : {}
          )
        : chargeRequestModel || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary createCustomerWithDefaultCard
     * @param {string} source source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerWithDefaultCardUsingPUT(
      source: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'source' is not null or undefined
      if (source === null || source === undefined) {
        throw new RequiredError(
          "source",
          "Required parameter source was null or undefined when calling createCustomerWithDefaultCardUsingPUT."
        );
      }
      const localVarPath = `/payment/customers/me/cards/{source}`.replace(
        `{${"source"}}`,
        encodeURIComponent(String(source))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary deleteCardFromCustomer
     * @param {string} source source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCardFromCustomerUsingDELETE(
      source: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'source' is not null or undefined
      if (source === null || source === undefined) {
        throw new RequiredError(
          "source",
          "Required parameter source was null or undefined when calling deleteCardFromCustomerUsingDELETE."
        );
      }
      const localVarPath = `/payment/customers/me/cards/{source}`.replace(
        `{${"source"}}`,
        encodeURIComponent(String(source))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getCustomer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerUsingGET(options: any = {}): RequestArgs {
      const localVarPath = `/payment/customers/me`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary listCustomerCards
     * @param {number} [limit] limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerCardsUsingGET(limit?: number, options: any = {}): RequestArgs {
      const localVarPath = `/payment/customers/me/cards`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * PaymentControllerApi - functional programming interface
 * @export
 */
export const PaymentControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary addCardToCustomer
     * @param {string} source source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCardToCustomerUsingPOST(
      source: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelCard> {
      const localVarAxiosArgs = PaymentControllerApiAxiosParamCreator(
        configuration
      ).addCardToCustomerUsingPOST(source, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary changeDefaultCardForCustomer
     * @param {string} source source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeDefaultCardForCustomerUsingPOST(
      source: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelCustomer> {
      const localVarAxiosArgs = PaymentControllerApiAxiosParamCreator(
        configuration
      ).changeDefaultCardForCustomerUsingPOST(source, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary createCharge
     * @param {ChargeRequestModel} chargeRequestModel chargeRequestModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChargeUsingPUT(
      chargeRequestModel: ChargeRequestModel,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelCharge> {
      const localVarAxiosArgs = PaymentControllerApiAxiosParamCreator(
        configuration
      ).createChargeUsingPUT(chargeRequestModel, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary createCustomerWithDefaultCard
     * @param {string} source source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerWithDefaultCardUsingPUT(
      source: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelCustomer> {
      const localVarAxiosArgs = PaymentControllerApiAxiosParamCreator(
        configuration
      ).createCustomerWithDefaultCardUsingPUT(source, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary deleteCardFromCustomer
     * @param {string} source source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCardFromCustomerUsingDELETE(
      source: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelCard> {
      const localVarAxiosArgs = PaymentControllerApiAxiosParamCreator(
        configuration
      ).deleteCardFromCustomerUsingDELETE(source, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getCustomer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerUsingGET(
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelCustomer> {
      const localVarAxiosArgs = PaymentControllerApiAxiosParamCreator(
        configuration
      ).getCustomerUsingGET(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary listCustomerCards
     * @param {number} [limit] limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerCardsUsingGET(
      limit?: number,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelPaymentSourceCollection> {
      const localVarAxiosArgs = PaymentControllerApiAxiosParamCreator(
        configuration
      ).listCustomerCardsUsingGET(limit, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }
  };
};

/**
 * PaymentControllerApi - factory interface
 * @export
 */
export const PaymentControllerApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary addCardToCustomer
     * @param {string} source source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCardToCustomerUsingPOST(source: string, options?: any) {
      return PaymentControllerApiFp(configuration).addCardToCustomerUsingPOST(
        source,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary changeDefaultCardForCustomer
     * @param {string} source source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeDefaultCardForCustomerUsingPOST(source: string, options?: any) {
      return PaymentControllerApiFp(
        configuration
      ).changeDefaultCardForCustomerUsingPOST(source, options)(axios, basePath);
    },
    /**
     *
     * @summary createCharge
     * @param {ChargeRequestModel} chargeRequestModel chargeRequestModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChargeUsingPUT(
      chargeRequestModel: ChargeRequestModel,
      options?: any
    ) {
      return PaymentControllerApiFp(configuration).createChargeUsingPUT(
        chargeRequestModel,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary createCustomerWithDefaultCard
     * @param {string} source source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerWithDefaultCardUsingPUT(source: string, options?: any) {
      return PaymentControllerApiFp(
        configuration
      ).createCustomerWithDefaultCardUsingPUT(source, options)(axios, basePath);
    },
    /**
     *
     * @summary deleteCardFromCustomer
     * @param {string} source source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCardFromCustomerUsingDELETE(source: string, options?: any) {
      return PaymentControllerApiFp(
        configuration
      ).deleteCardFromCustomerUsingDELETE(source, options)(axios, basePath);
    },
    /**
     *
     * @summary getCustomer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerUsingGET(options?: any) {
      return PaymentControllerApiFp(configuration).getCustomerUsingGET(options)(
        axios,
        basePath
      );
    },
    /**
     *
     * @summary listCustomerCards
     * @param {number} [limit] limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerCardsUsingGET(limit?: number, options?: any) {
      return PaymentControllerApiFp(configuration).listCustomerCardsUsingGET(
        limit,
        options
      )(axios, basePath);
    }
  };
};

/**
 * PaymentControllerApi - object-oriented interface
 * @export
 * @class PaymentControllerApi
 * @extends {BaseAPI}
 */
export class PaymentControllerApi extends BaseAPI {
  /**
   *
   * @summary addCardToCustomer
   * @param {string} source source
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public addCardToCustomerUsingPOST(source: string, options?: any) {
    return PaymentControllerApiFp(
      this.configuration
    ).addCardToCustomerUsingPOST(source, options)(this.axios, this.basePath);
  }

  /**
   *
   * @summary changeDefaultCardForCustomer
   * @param {string} source source
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public changeDefaultCardForCustomerUsingPOST(source: string, options?: any) {
    return PaymentControllerApiFp(
      this.configuration
    ).changeDefaultCardForCustomerUsingPOST(source, options)(
      this.axios,
      this.basePath
    );
  }

  /**
   *
   * @summary createCharge
   * @param {ChargeRequestModel} chargeRequestModel chargeRequestModel
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public createChargeUsingPUT(
    chargeRequestModel: ChargeRequestModel,
    options?: any
  ) {
    return PaymentControllerApiFp(this.configuration).createChargeUsingPUT(
      chargeRequestModel,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary createCustomerWithDefaultCard
   * @param {string} source source
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public createCustomerWithDefaultCardUsingPUT(source: string, options?: any) {
    return PaymentControllerApiFp(
      this.configuration
    ).createCustomerWithDefaultCardUsingPUT(source, options)(
      this.axios,
      this.basePath
    );
  }

  /**
   *
   * @summary deleteCardFromCustomer
   * @param {string} source source
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public deleteCardFromCustomerUsingDELETE(source: string, options?: any) {
    return PaymentControllerApiFp(
      this.configuration
    ).deleteCardFromCustomerUsingDELETE(source, options)(
      this.axios,
      this.basePath
    );
  }

  /**
   *
   * @summary getCustomer
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public getCustomerUsingGET(options?: any) {
    return PaymentControllerApiFp(this.configuration).getCustomerUsingGET(
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary listCustomerCards
   * @param {number} [limit] limit
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public listCustomerCardsUsingGET(limit?: number, options?: any) {
    return PaymentControllerApiFp(this.configuration).listCustomerCardsUsingGET(
      limit,
      options
    )(this.axios, this.basePath);
  }
}

/**
 * UserProfileControllerApi - axios parameter creator
 * @export
 */
export const UserProfileControllerApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary getUserProfile
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProfileUsingGET1(
      userProfileId: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'userProfileId' is not null or undefined
      if (userProfileId === null || userProfileId === undefined) {
        throw new RequiredError(
          "userProfileId",
          "Required parameter userProfileId was null or undefined when calling getUserProfileUsingGET1."
        );
      }
      const localVarPath = `/users/{userProfileId}/profiles`.replace(
        `{${"userProfileId"}}`,
        encodeURIComponent(String(userProfileId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * UserProfileControllerApi - functional programming interface
 * @export
 */
export const UserProfileControllerApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary getUserProfile
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProfileUsingGET1(
      userProfileId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelUserProfileModel> {
      const localVarAxiosArgs = UserProfileControllerApiAxiosParamCreator(
        configuration
      ).getUserProfileUsingGET1(userProfileId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }
  };
};

/**
 * UserProfileControllerApi - factory interface
 * @export
 */
export const UserProfileControllerApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary getUserProfile
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProfileUsingGET1(userProfileId: string, options?: any) {
      return UserProfileControllerApiFp(configuration).getUserProfileUsingGET1(
        userProfileId,
        options
      )(axios, basePath);
    }
  };
};

/**
 * UserProfileControllerApi - object-oriented interface
 * @export
 * @class UserProfileControllerApi
 * @extends {BaseAPI}
 */
export class UserProfileControllerApi extends BaseAPI {
  /**
   *
   * @summary getUserProfile
   * @param {string} userProfileId userProfileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserProfileControllerApi
   */
  public getUserProfileUsingGET1(userProfileId: string, options?: any) {
    return UserProfileControllerApiFp(
      this.configuration
    ).getUserProfileUsingGET1(userProfileId, options)(
      this.axios,
      this.basePath
    );
  }
}

/**
 * UserRelationshipControllerApi - axios parameter creator
 * @export
 */
export const UserRelationshipControllerApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary getFollowers
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowersUsingGET1(
      limit: number,
      offset: number,
      userProfileId: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling getFollowersUsingGET1."
        );
      }
      // verify required parameter 'offset' is not null or undefined
      if (offset === null || offset === undefined) {
        throw new RequiredError(
          "offset",
          "Required parameter offset was null or undefined when calling getFollowersUsingGET1."
        );
      }
      // verify required parameter 'userProfileId' is not null or undefined
      if (userProfileId === null || userProfileId === undefined) {
        throw new RequiredError(
          "userProfileId",
          "Required parameter userProfileId was null or undefined when calling getFollowersUsingGET1."
        );
      }
      const localVarPath = `/users/{userProfileId}/followed-by`.replace(
        `{${"userProfileId"}}`,
        encodeURIComponent(String(userProfileId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getFollowing
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowingUsingGET1(
      limit: number,
      offset: number,
      userProfileId: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling getFollowingUsingGET1."
        );
      }
      // verify required parameter 'offset' is not null or undefined
      if (offset === null || offset === undefined) {
        throw new RequiredError(
          "offset",
          "Required parameter offset was null or undefined when calling getFollowingUsingGET1."
        );
      }
      // verify required parameter 'userProfileId' is not null or undefined
      if (userProfileId === null || userProfileId === undefined) {
        throw new RequiredError(
          "userProfileId",
          "Required parameter userProfileId was null or undefined when calling getFollowingUsingGET1."
        );
      }
      const localVarPath = `/users/{userProfileId}/follows`.replace(
        `{${"userProfileId"}}`,
        encodeURIComponent(String(userProfileId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * UserRelationshipControllerApi - functional programming interface
 * @export
 */
export const UserRelationshipControllerApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary getFollowers
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowersUsingGET1(
      limit: number,
      offset: number,
      userProfileId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelstring> {
      const localVarAxiosArgs = UserRelationshipControllerApiAxiosParamCreator(
        configuration
      ).getFollowersUsingGET1(limit, offset, userProfileId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getFollowing
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowingUsingGET1(
      limit: number,
      offset: number,
      userProfileId: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<BaseResponseModelstring> {
      const localVarAxiosArgs = UserRelationshipControllerApiAxiosParamCreator(
        configuration
      ).getFollowingUsingGET1(limit, offset, userProfileId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }
  };
};

/**
 * UserRelationshipControllerApi - factory interface
 * @export
 */
export const UserRelationshipControllerApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary getFollowers
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowersUsingGET1(
      limit: number,
      offset: number,
      userProfileId: string,
      options?: any
    ) {
      return UserRelationshipControllerApiFp(
        configuration
      ).getFollowersUsingGET1(limit, offset, userProfileId, options)(
        axios,
        basePath
      );
    },
    /**
     *
     * @summary getFollowing
     * @param {number} limit limit
     * @param {number} offset offset
     * @param {string} userProfileId userProfileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowingUsingGET1(
      limit: number,
      offset: number,
      userProfileId: string,
      options?: any
    ) {
      return UserRelationshipControllerApiFp(
        configuration
      ).getFollowingUsingGET1(limit, offset, userProfileId, options)(
        axios,
        basePath
      );
    }
  };
};

/**
 * UserRelationshipControllerApi - object-oriented interface
 * @export
 * @class UserRelationshipControllerApi
 * @extends {BaseAPI}
 */
export class UserRelationshipControllerApi extends BaseAPI {
  /**
   *
   * @summary getFollowers
   * @param {number} limit limit
   * @param {number} offset offset
   * @param {string} userProfileId userProfileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserRelationshipControllerApi
   */
  public getFollowersUsingGET1(
    limit: number,
    offset: number,
    userProfileId: string,
    options?: any
  ) {
    return UserRelationshipControllerApiFp(
      this.configuration
    ).getFollowersUsingGET1(limit, offset, userProfileId, options)(
      this.axios,
      this.basePath
    );
  }

  /**
   *
   * @summary getFollowing
   * @param {number} limit limit
   * @param {number} offset offset
   * @param {string} userProfileId userProfileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserRelationshipControllerApi
   */
  public getFollowingUsingGET1(
    limit: number,
    offset: number,
    userProfileId: string,
    options?: any
  ) {
    return UserRelationshipControllerApiFp(
      this.configuration
    ).getFollowingUsingGET1(limit, offset, userProfileId, options)(
      this.axios,
      this.basePath
    );
  }
}
